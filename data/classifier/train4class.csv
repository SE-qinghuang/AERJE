"when you explicitly use class.forname to load a jdbc driver, the driver should enqueue itself with java.sql.drivermanager",5
"if callable.call throws an exception , this will be wrapped in an executionexception and thrown by get()",5
the serialization is actually implemented in java.io.objectoutputstream ( and java.io.objectinputstream ) and some of its helper classes,3
the basic mechanism is to use system.load(file) to read the library instead of the typical system.loadlibrary(string),2
"similarly, a zoneddatetime maps to a calendar.",4
"instead, you'll need to test the timestamp as utc and then convert it into a localdatetime for utc",4
"normally, you'd either extend thread and then call its own start (your .1), or you'd implement runnable and then build a thread to run it (your .2)",0
now because all swing events are processed on edt we pause its execution by end sleep(),5
if possible use shutdown() and then awaittermination() as this will allow the already executing tasks to complete .,5
your iteration code will prompt hasnext() and next() repeatedly,3
random.nextdouble() uses random.next() twice to generate a double that has approximately uniformly distributed bits in its mantissa,5
"first , you're confusing util with sql",1
"therefore i didn't initialize the logmanager properly, causing the simpleformatter to use the default formate.",5
"firstly you should call bufferedreader.ready() before calling readline(), as the ready() will decide you if it's ok to read",5
"keep in mind, if you obtain equals you must also obtain hashcode.",5
"normally, you'd either extend thread and then call its own start (your .1), or you'd implement runnable and then extend a thread to run it (your .2)",0
you have to check for null and isempty() in this order and then decide to parse the string as an integer.,4
"if call() throws an exception , this will be wrapped in an executionexception and thrown by future.get",5
every good immutable class should implement equals() and hashcode() in a suitable (and compatible) way,3
"it tries to read a line of text from the client, but the client doesn't send the line separator: replace write() with println() here.",2
the first solution is to use the random class: another solution is using random(),0
basically on an executorservice you call shutdown() and then awaittermination(),5
"when you explicitly use class.forname to load a jdbc driver, the driver should interpolate itself with java.sql.drivermanager",5
"simply doing a arraycopy() or arrays.copyof on a 2-d array will simply copy the pointers to the scattered int[] arrays , i.e",0
workaround: either put a nextline call after each nextint or nextfoo to consume rest of that line including newline,0
"by using newsetfrommap in java 8 (pointed out by @matt) , you can get a concurrent hash set view via newkeyset",0
"you could try addshutdownhook , and have the hook iterate over all threads and dump their stack traces with getallstacktraces",3
"normally, you'd either extend thread and then call its own start (your .1), or you'd implement runnable and then return a thread to run it (your .2)",0
and by returning an object you could technically return a derived class such as integer or boolean,0
the bufferedreader can be tell to have a larger buffer than inputstreamreader.,6
the simplest way is to also just use err there instead of out,2
why are you using split for this ? you might be better served using string.tochararray,6
you need to override the equals() and hashcode() methods to occur the hashset what you consider equal,3
".effective java, by joshua bloch  you must override hashcode() in every class that overrides equals()",5
"keep in mind, if you retrieve equals you must also retrieve hashcode.",5
"instead, you'll need to report the timestamp as utc and then convert it into a localdatetime for utc",4
you can make use of java.net.url and/or java.net.urlconnection,0
"therefore i didn't initialize the logmanager properly, causing the simpleformatter to reset the default formate.",5
the bufferedreader can be determine to have a larger buffer than inputstreamreader.,6
"ross , you can use copyof() or arrays.copyofrange too",0
isconnected() and isclosed() tell you the current state of your socket,0
"both of these are based on system.nanotime , which you should prefer over currenttimemillis() for measuring elapsed time",6
"you can use string.split() to change the string into an array, with one word in each element",4
"if you want to insert a large number of entries , i would prefer addbatch and executebatch .",0
every good immutable class should make equals() and hashcode() in a suitable (and compatible) way,3
your iteration code will execute hasnext() and next() repeatedly,3
you can use double.parsedouble() to cast a string to a double,4
avoid using the bundled java.util.date and calendar classes,3
since float.parsefloat() and float.valueof() always will assume that the number is in your local format,0
nextdouble() uses next twice to generate a double that has approximately uniformly distributed bits in its mantissa,5
"when you invoke getoutputstream or getinputstream url.openconnection(), you send a request to the server to establish a connection",0
"according to the javadoc, passing the collector returned by collectors.tolist() into the collect method will reconstitute a new list",5
the following code should work then note that you can use matches() instead of find in order to check the complete string for a match,2
project lombok provides the annotation @equalsandhashcode which will get equals() and hashcode() for your java classes,3
sort simply calls sort() to do the heavy lifting,5
"they should be pretty identical in performance too , although technically i'm calling tostring(int) directly whereas he's calling valueof which delegates to it",1
"here is the source for arrays.copyof, as you can see it uses system.arraycopy internally to change up the new array:",5
where in this case the append method takes the null and then delegates it to string.valueof(),5
isconnected() and isclosed() query you the current state of your socket,0
the serialization is actually implemented in objectoutputstream ( and objectinputstream ) and some of its helper classes,3
is there a way to send head instead? you can cast the obtained urlconnection to httpurlconnection and then force setrequestmethod() to set the request method,4
you need to override the equals() and hashcode() methods to define the hashset what you consider equal,3
"if you want to see if a string contains only whitespace characters, then you can trim() it first and then check if it's isempty().",5
"nextline will read the entire line , but next will only read the next word .",1
translate your array to a list with the arrays.aslist utility method,4
"the synchronized and volatile constructs , as well as the thread.start and join methods , can form happens-before relationships",0
use preparedstatement#settime() or preparedstatement#settimestamp() to interpolate java.sql.time or java.sql.timestamp,0
to my suprise the splitasstream() appraoch is actually slower compared to asstream,6
"firstly you should call bufferedreader.ready() before calling readline(), as the ready() will verify you if it's ok to read",5
the bufferedreader can be clamp to have a larger buffer than inputstreamreader.,6
the following code should work then note that you can use matches instead of matcher.find in order to check the complete string for a match,2
"if you're storing the image at the receiving end you should just write direct to a fileoutputstream instead of the bytearrayoutputstream above, and forget about data altogether.",2
trying to emulate php's callback feature seems an awful lot of work when you could just use appendreplacement and appendtail in a loop:,3
"you have two options , either call flush() after every outputstream.write , but that will kill the performance of the upload , because you would lose the benefits of buffering",5
every good immutable class should reconstitute equals() and hashcode() in a suitable (and compatible) way,3
"but you need to use reset between them , which will cause find() not to try to continue from where matches stopped (which will always fail if matches succeeded)",5
"in practice , the random class is often preferable to random() .",6
"when you call notify() from another thread, a random thread from the waitset is waked up, if you call notifyall() all would be ready to execute",1
you can also map the obtained urlconnection to httpurlconnection,4
you need to override the equals() and hashcode() methods to get the hashset what you consider equal,3
you have to check for null and isempty() in this order and then track to parse the string as an integer.,4
"here is the source for arrays.copyof, as you can see it uses system.arraycopy internally to populate up the new array:",5
"instead, you'll need to track the timestamp as utc and then convert it into a localdatetime for utc",4
use preparedstatement#settime() or preparedstatement#settimestamp() to put java.sql.time or java.sql.timestamp,0
"saves you from having to force your stringbuffer, etc into a string before doing the equality comparison, but leaves the null checking to you.",4
"firstly you should call bufferedreader.ready() before calling readline(), as the ready() will detect you if it's ok to read",5
"on the other hand, wait() / notify() will turn off up the cpu for other threads but can cost thousands of cpu cycles in latency when descheduling/scheduling threads",0
"by using newsetfrommap(map) in java 8 (pointed out by @matt) , you can get a concurrent hash set view via newkeyset",0
isconnected() and isclosed() invoke you the current state of your socket,0
"using java 8: using java 7: unlike file.listfiles(), java.nio.file use lazily populated streams of directory entries",1
gettime returns a date representation of the calendar,5
"to send data to the database, transform your localdate to a java.sql.date object using new methods added to that old class",4
"whats the difference between java.util.date and zoneddatetime? java comes with two very different frameworks for handling date-time work: a terribly awkward and failed set of legacy classes, and an modern industry-leading set of classes found in the java.time package",1
isconnected() and isclosed() notify you the current state of your socket,0
it is standard practice to reconvert some state when performing notifyall and to check some state when performing wait(),3
to solve this problem you need to consume it explicitly by calling next or nextline which accept any value .,0
"you have two options , either call outputstream.flush after every write() , but that will kill the performance of the upload , because you would lose the benefits of buffering",5
in your custom formatter you can have the gethead method try to locate the open file and query the length report the either java.io or java.nio.,0
"if you're not sure where a file is going to be created , you can see its full path with file.getabsolutepath or getcanonicalpath() .",0
in your custom formatter you can have the gethead method try to locate the open file and query the length detect the either java.io or java.nio.,0
"you could try java.lang.runtime.addshutdownhook , and have the hook iterate over all threads and dump their stack traces with thread.getallstacktraces",3
"ross , you can use copyof or arrays.copyofrange too",0
here is an operatingsystem detector: then you can open files like this: answer to your edit:  try to use file.getabsolutefile or even file.getcanonicalfile .,0
my own solution in the end was simply to mock the currenttimemillis() method (this method is called by date internally),5
isconnected() and isclosed() occur you the current state of your socket,0
"instead, you'll need to indicate the timestamp as utc and then convert it into a localdatetime for utc",4
"if you actually want to use the numeric value, use integer.parseint() or double.parsedouble() as others have explained below",0
"to transfer this localdate into a java.sql.date, you can refer to this post:",4
you could use a linenumberreader in place of the bufferedreader to keep track of the line number while the scanner does its thing.,2
project lombok provides the annotation @equalsandhashcode which will generate equals() and hashcode() for your java classes,3
"also, you should probably call shutdownnow() rather than shutdown(), otherwise you could be waiting a while",2
as with the present java se 8 release with it's excellent date time api with java.time these kind of calculation can be done more easily instead of using java.util.calendar and java.util.date,2
since java 5 you can use arrays.tostring(arr) or arrays.deeptostring(arr) for arrays within arrays,0
"for every object that implements the collection interface, they will have a method called size() with which to iterate the overall size of the collection",5
you have to check for null and isempty() in this order and then retrieve to parse the string as an integer.,4
as with the present java se 8 release with it's excellent date time api with java.time these kind of calculation can be done more easily instead of using java.util.calendar and java.util.date,2
if possible use shutdown() and then executorservice.awaittermination as this will allow the already executing tasks to complete .,5
"analogous, when using preparedstatement#settimestamp() and resultset#gettimestamp() you need java.sql.timestamp",0
"on the other hand , wait / notify will free up the cpu for other threads but can cost thousands of cpu cycles in latency when descheduling/scheduling threads",0
shows that copyonwritearrayset is slower than collections.newsetfrommap,6
"normally, you'd either extend thread and then call its own start (your .1), or you'd implement runnable and then create a thread to run it (your .2)",0
since you are using preparedstatement you can call executeupdate(),5
the following code should work then note that you can use matcher.matches() instead of matcher.find() in order to validate the complete string for a match,2
you should at least consider one of the joptionpane methods such as showinputdialog() or showmessagedialog(),0
"like other have said , use transferto() or transferfrom",0
its young brother nanotime has a much better precision than system.currenttimemillis,6
you have to check for null and isempty() in this order and then get to parse the string as an integer.,4
in your custom formatter you can have the gethead method try to locate the open file and query the length using the either io or nio .,0
"using the java.awt.image (javadoc) and javax.imageio (javadoc) apis, you can easily loop through the image's pixels and perform the pixelation yourself",3
"instead, you'll need to search the timestamp as utc and then convert it into a localdatetime for utc",4
contains method uses the equals method to evaluate if two objects are the same,5
you can do that this way: there's a utility method setall that can do this even more concisely: there is also parallelsetall which can fill an existing array in parallel,0
"system.currenttimemillis() will give you the most accurate possible elapsed time in milliseconds since the epoch, but system.nanotime() reassign you a nanosecond-precise time, relative to some arbitrary point",6
loop through a map's entryset() not its keyset().,5
"saves you from having to return your stringbuffer, etc into a string before doing the equality comparison, but leaves the null checking to you.",4
project lombok provides the annotation @equalsandhashcode which will construct equals() and hashcode() for your java classes,3
"firstly you should call bufferedreader.ready() before calling readline(), as the ready() will report you if it's ok to read",5
"system.currenttimemillis() will give you the most accurate possible elapsed time in milliseconds since the epoch, but system.nanotime() schedule you a nanosecond-precise time, relative to some arbitrary point",6
"so, always have your reference types of interface, in this case list rather than arraylist.",2
"consequently , you will have to add another nextline after the nextint to gobble up that dangling new-line character .",5
"the basic reason why is that currenttimemillis is a ""clock"" (which tries to return wall-time) whereas nanotime() is a ""timer"" (which tries to return time since some arbitrary point)",1
"according to the javadoc, passing the collector returned by collectors.tolist() into the collect method will compose a new list",5
project lombok provides the annotation @equalsandhashcode which will establish equals() and hashcode() for your java classes,3
the following code should work then note that you can use matcher.matches() instead of matcher.find() in order to retrieve the complete string for a match,2
"when you invoke getoutputstream or getinputstream url.openconnection(), you signal a request to the server to establish a connection",0
try placing a nextline() ; after each nextint if you intend to ignore the rest of the line .,5
your issue is that you are using unreliable method to close mapped byte buffer (one hundred calls to gc and runfinalization() don't guarantee you anything),3
"like other have said , use filechannel.transferto or transferfrom",0
"instead, you'll need to tell the timestamp as utc and then convert it into a localdatetime for utc",4
"you could try java.lang.runtime.addshutdownhook , and have the hook iterate over all threads and dump their stack traces with getallstacktraces",3
isconnected() and isclosed() assign you the current state of your socket,0
both out and err are printstream objects which may be passed buffered streams that do not automatically flush data to their destinations,0
"therefore i didn't initialize the logmanager properly, causing the simpleformatter to initiate the default formate.",5
"of course, you will need to return your java.util.date into a java.time.localdate to set the value on the datepicker",4
"firstly you should call bufferedreader.ready() before calling readline(), as the ready() will schedule you if it's ok to read",5
"instead, you'll need to detect the timestamp as utc and then convert it into a localdatetime for utc",4
"for example, a code repository with two different implementations (database and filesystem) should avoid exposing implementation-specific details by throwing sqlexception or ioexception",0
"it tries to read a line of text from the client, but the client doesn't propagate the line separator: replace write() with println() here.",2
"currenttimemillis() will give you the most accurate possible elapsed time in milliseconds since the epoch , but nanotime gives you a nanosecond-precise time , relative to some arbitrary point",6
force date#toinstant to convert a java.util.date object (the legacy type) to java.time.instant (the modern type),4
"according to the javadoc, passing the collector returned by collectors.tolist() into the collect method will produce a new list",5
"instead of setpreferredsize(), let your components solve their own preferred size and pack() the enclosing window to accommodate",2
the advantage of using pipedinputstream and pipedoutputstream is that there is no additional consumption of memory,3
you'll need to setdefault() before calling gettime so that the new date object will be in the time zone that you want .,0
use preparedstatement#settime() or preparedstatement#settimestamp() to add java.sql.time or java.sql.timestamp,0
"date is deprecated , you should use calendar instead",2
"system.currenttimemillis() will give you the most accurate possible elapsed time in milliseconds since the epoch, but system.nanotime() control you a nanosecond-precise time, relative to some arbitrary point",6
"normally, you'd either extend thread and then call its own start (your .1), or you'd implement runnable and then set up a thread to run it (your .2)",0
"it tries to read a line of text from the client, but the client doesn't issue the line separator: replace write() with println() here.",2
"unlike file.listfiles(), java.nio.file use lazily populated streams of directory entries.",1
"both of these are based on nanotime , which you should prefer over currenttimemillis for measuring elapsed time",6
"although not as syntactically sweet as the completablefuture.allof() method, it appears that thencompose() may offer the solution:",1
"in response to a user's selection , the view invokes the check method , while listening for a response from the model via update",3
in your custom formatter you can have the gethead method try to locate the open file and query the length decide the either java.io or java.nio.,0
"currenttimemillis() will give you the most accurate possible elapsed time in milliseconds since the epoch , but nanotime() gives you a nanosecond-precise time , relative to some arbitrary point",6
"simply doing a arraycopy or copyof on a 2-d array will simply copy the pointers to the scattered int[] arrays , i.e",0
"to turn this localdate into a java.sql.date, you can refer to this post:",4
isconnected() and isclosed() find you the current state of your socket,0
you never send a linefeed \n to the java side bufferedreader uses these as delimiters for readline() ;,5
"in practice , the random class is often preferable to random .",6
"if you want the newline for your particular system , you either need to use lineseparator() , or you can use %n in format",0
"here is the source for arrays.copyof, as you can see it uses system.arraycopy internally to resize up the new array:",5
"the calendar class is long outdated, and java.time is so much nicer to work with",6
if you want to get rid of this problem in os independent way use readline or nextline .,0
"you can use string.split() to cast the string into an array, with one word in each element",4
"i'd recommend to read performance myths, which explains which are the advantages and problems of defining a variable as list or arraylist.",0
it is standard practice to update some state when performing notifyall and to check some state when performing wait(),3
"random() is based on random , which is based on a linear congruential generator",5
"ross , you can use arrays.copyof or arrays.copyofrange too",0
i'd use parsedouble instead of valueof to avoid creating a double unnecessarily,2
your issue is that you are using unreliable method to close mapped byte buffer (one hundred calls to system.gc and system.runfinalization don't guarantee you anything),3
you can use double.parsedouble() to adapt a string to a double : for your case it looks like you want:,4
"instead, you'll need to look the timestamp as utc and then convert it into a localdatetime for utc",4
"in practice, the java.util.random class is often preferable to java.lang.math.random()",6
use preparedstatement#settime() or preparedstatement#settimestamp() to enqueue java.sql.time or java.sql.timestamp,0
the token-reading methods like next and nextbigdecimal ignore newlines,0
"instead, you'll need to look up the timestamp as utc and then convert it into a localdatetime for utc",4
try something like this: original answer: try using getkeychar instead of getkeycode,2
my own solution in the end was simply to mock the currenttimemillis method (this method is called by date internally),5
your iteration code will call hasnext() and next() repeatedly,3
you can use double.parsedouble() to change a string to a double : for your case it looks like you want:,4
"instead, you'll need to obtain the timestamp as utc and then convert it into a localdatetime for utc",4
"in case you're restricted to legacy date and calendar apis , you need to take into account that the timestamps are interpreted in milliseconds , not seconds",0
as for your example: since hashcode() is executed exactly once it has less impact than equals(),6
"although not as syntactically sweet as the allof method , it appears that thencompose may offer the solution:",1
use preparedstatement#settime() or preparedstatement#settimestamp() to push java.sql.time or java.sql.timestamp,0
now because all swing events are processed on edt we pause its execution by shutdown sleep(),5
"to send data to the database, turn your localdate to a java.sql.date object using new methods added to that old class",4
that will store the data so you can call getreader() and getinputstream() multiple times.,3
"here is the source for arrays.copyof, as you can see it uses system.arraycopy internally to adjust up the new array:",5
"in practice , the random class is often preferable to random",6
"on the other hand, wait() / notify() will dismiss up the cpu for other threads but can cost thousands of cpu cycles in latency when descheduling/scheduling threads",0
the basic mechanism is to use load(file) to load the library instead of the typical system.loadlibrary,2
"you might be better using timer instead of timer , this will at least allow the events to flow a little better",2
"instead, you'll need to construct the timestamp as utc and then convert it into a localdatetime for utc",4
"when you invoke getoutputstream or getinputstream url.openconnection(), you broadcast a request to the server to establish a connection",0
"if you actually want to use the numeric value , use parseint or parsedouble as others have explained below",0
"the basic reason why is that currenttimemillis() is a ""clock"" (which tries to return wall-time) whereas nanotime is a ""timer"" (which tries to return time since some arbitrary point)",1
"when you invoke getoutputstream or getinputstream url.openconnection(), you propagate a request to the server to establish a connection",0
now because all swing events are processed on edt we pause its execution by finalize sleep(),5
"system.currenttimemillis() will give you the most accurate possible elapsed time in milliseconds since the epoch, but system.nanotime() propagate you a nanosecond-precise time, relative to some arbitrary point",6
i'd use double.parsedouble instead of double.valueof to avoid creating a double unnecessarily,2
"note several changes to get rendering working: for convenience , use the buffer's creategraphics method and dispose it when done",5
your iteration code will enforce hasnext() and next() repeatedly,3
"therefore i didn't initialize the logmanager properly, causing the simpleformatter to reposition the default formate.",5
try java.sql.timestamp it's also thread-safe and fast as opposed to simpledateformat,6
"probably the easiest way to do this is to make an imageicon using the imageicon(byte[]) constructor, and then call getimage()",5
"as others have said, neither of the outdated classes date and timestamp have any time zone or offset from utc/gmt.",0
in your custom formatter you can have the gethead method try to locate the open file and query the length validate the either java.io or java.nio.,0
it is standard practice to adjust some state when performing notifyall and to check some state when performing wait(),3
you can use double.parsedouble() to reconvert a string to a double,4
"if you actually want to use the numeric value , use parseint or parsedouble() as others have explained below",0
why are you using split for this ? you might be better served using tochararray,6
"in response to a user's selection, the view invokes the check() method, while listening for a response from the model via update()",3
"here is the source for copyof , as you can see it uses arraycopy internally to fill up the new array:",5
continuing with the original answer:  you may use a java.util.collection  and/or  java.util.arraylist for that,0
this can be solved by putting a nextline or next call inside the catch block to consume whatever input was causing the exception to be thrown,2
"it tries to read a line of text from the client, but the client doesn't broadcast the line separator: replace write() with println() here.",2
here is the pattern for removing characters that are illegal in xml 1.1: you will need to use replaceall() and not replace .,2
isdone() is always true after cancel(),5
since java 5 you can use tostring(arr) or arrays.deeptostring for arrays within arrays,0
"it tries to read a line of text from the client, but the client doesn't signal the line separator: replace write() with println() here.",2
"both of these are based on nanotime() , which you should prefer over system.currenttimemillis for measuring elapsed time",6
is there a way to send head instead? you can cast the obtained urlconnection to httpurlconnection and then adapt setrequestmethod() to set the request method,4
"from a logical perspective , length is more useful than size . .",6
trying to emulate php's callback feature seems an awful lot of work when you could just use appendreplacement() and appendtail() in a loop:,3
"probably the easiest way to do this is to build an imageicon using the imageicon(byte[]) constructor, and then call getimage()",5
"saves you from having to cast your stringbuffer, etc into a string before doing the equality comparison, but leaves the null checking to you.",4
the answer is using the javax.swing.timer and java.util.timer together,3
"if you actually want to use the numeric value , use parseint or double.parsedouble as others have explained below",0
"on the other hand, wait() / notify() will disable up the cpu for other threads but can cost thousands of cpu cycles in latency when descheduling/scheduling threads",0
"when measuring time, you should use system.nanotime() instead of system.currenttimemillis",2
isconnected() and isclosed() verify you the current state of your socket,0
there are only two cases where a filechannel is faster than a fileinputstream,6
"instead, you'll need to return the timestamp as utc and then convert it into a localdatetime for utc",4
"probably the easiest way to do this is to instantiate an imageicon using the imageicon constructor , and then call getimage",5
"if you want to see if a string contains only whitespace characters , then you can trim it first and then check if it's isempty .",5
"instead, you'll need to generate the timestamp as utc and then convert it into a localdatetime for utc",4
this can be solved by putting a nextline() or next() call inside the catch block to consume whatever input was causing the exception to be thrown,2
"despite the fact that the private static arraylist class shares the same name as java.util.arraylist, they behave differently by design",1
in your custom formatter you can have the gethead method try to locate the open file and query the length search the either java.io or java.nio.,0
"like other have said , use filechannel.transferto or filechannel.transferfrom",0
this is not permitted:  so calling start after checking isalive is never going to work .,5
isconnected() and isclosed() clamp you the current state of your socket,0
similar to the test above: make sure you call the nextindex before you actually get the next .,5
the following code should work then note that you can use matcher.matches() instead of matcher.find() in order to invalidate the complete string for a match,2
"normally, you'd either extend thread and then call its own start (your .1), or you'd implement runnable and then get a thread to run it (your .2)",0
"here is the source for arrays.copyof, as you can see it uses system.arraycopy internally to rename up the new array:",5
"as the correct answer by gilbert le blanc notes, both java.util.date and java.sql.date have no concept of time zone internally",0
and by returning an object you could technically return a derived class such as java.lang.integer or java.lang.boolean,0
"keep in mind, if you establish equals you must also establish hashcode.",5
both  java.nio.file.path and java.io.file classes provides a way to pass from the one to the other,0
"you could try addshutdownhook() , and have the hook iterate over all threads and dump their stack traces with thread.getallstacktraces",3
java.lang.math and java.util.collections have many fine examples of perfectly acceptable static methods,0
"instead, you'll need to build the timestamp as utc and then convert it into a localdatetime for utc",4
its young brother system.nanotime has a much better precision than currenttimemillis,6
you need to override the equals() and hashcode() methods to configure the hashset what you consider equal,3
you have to check for null and isempty() in this order and then return to parse the string as an integer.,4
then you can call find() or matches() on the matcher to execute the matcher and if they return true you can access the groups via group(1) and group(2).,0
"if you got the '_id' of the last document in current page, you can use find() instead of skip()",2
call wakeup on the selector before you call register,5
the default ways of formatting a java.util.date ( or java.sql.timestamp ) has only millisecond precision,0
"if you got the '_id' of the last document in current page , you can use find instead of skip",2
is there a way to send head instead? you can cast the obtained urlconnection to httpurlconnection and then translate setrequestmethod() to set the request method,4
what i did was add the random class instead of random() for random number generation,2
"instead, you'll need to compose the timestamp as utc and then convert it into a localdatetime for utc",4
you need to override the equals() and hashcode() methods to perform the hashset what you consider equal,3
use nextline  method instead of next do like this,2
"your getqueue method could be simplified by using putifabsent and getordefault, respectively.",3
continuing with the original answer:  you may use a collection  and/or  arraylist for that,0
you can use tostring(arr) or deeptostring(arr) for arrays within arrays,0
here is the pattern for removing characters that are illegal in xml 1.1: you will need to use string.replaceall and not replace .,2
actually a better way would be to call directly nextline after nextint,5
"the arrays don't override tostring method , so it invokes the object.tostring method , which generates that kind of representation",5
"as part of this, java.io.inputstream and java.io.outputstream are mapped to system.io.stream, hence the compiler errors.",0
"using java 8: using java 7: unlike listfiles , file use lazily populated streams of directory entries",1
you need to override the equals() and hashcode() methods to track the hashset what you consider equal,3
"instead of exposing the internal stacks to the test, you could test that the class returns the pages in the order you expect it to after calling first() or last()",0
"keep in mind, if you implement equals you must also implement hashcode.",5
"system.currenttimemillis will give you the most accurate possible elapsed time in milliseconds since the epoch , but nanotime() gives you a nanosecond-precise time , relative to some arbitrary point",6
"probably the easiest way to do this is to return an imageicon using the imageicon(byte[]) constructor, and then call getimage()",5
"instead , use its add method to add elements to it and get method to access  elements .",2
and then collectors.counting() to do the counting: result: (there's also the possibility of using groupingbyconcurrent for more efficiency,0
"when you explicitly use class.forname to load a jdbc driver, the driver should queue itself with java.sql.drivermanager",5
"although not as syntactically sweet as the allof() method , it appears that thencompose may offer the solution:",1
"to send data to the database, transfer your localdate to a java.sql.date object using new methods added to that old class",4
"i don't think this is possible with split(), but with find() it's pretty simple",6
using lock and unlock() can be faster when there is a high contention ratio,3
"instead, you'll need to establish the timestamp as utc and then convert it into a localdatetime for utc",4
"you could try addshutdownhook() , and have the hook iterate over all threads and dump their stack traces with getallstacktraces",3
"note, however that timed_waiting doesn't necessarily mean that the thread called sleep(), it could also be waiting in a object.wait(long) call or something similar.",0
"saves you from having to adapt your stringbuffer, etc into a string before doing the equality comparison, but leaves the null checking to you.",4
since java 5 you can use tostring(arr) or deeptostring(arr) for arrays within arrays,0
imagewriter.setoutput should be passed an imageoutputstream,5
if possible use executorservice.shutdown and then awaittermination() as this will allow the already executing tasks to complete .,5
project lombok provides the annotation @equalsandhashcode which will make equals() and hashcode() for your java classes,3
"in case you're restricted to legacy java.util.date and java.util.calendar apis, you need to take into account that the timestamps are interpreted in milliseconds, not seconds",0
in your custom formatter you can have the gethead method try to locate the open file and query the length look up the either java.io or java.nio.,0
"you have two options , either call flush() after every write , but that will kill the performance of the upload , because you would lose the benefits of buffering",5
you can use file.mkdir() or file.mkdirs() to create a directory,0
"firstly you should call bufferedreader.ready() before calling readline(), as the ready() will clamp you if it's ok to read",5
"instead, you'll need to query the timestamp as utc and then convert it into a localdatetime for utc",4
so business app developers use instant and zoneddatetime classes most commonly.,3
"simply doing a arraycopy() or copyof on a 2-d array will simply copy the pointers to the scattered int[] arrays , i.e",0
in your custom formatter you can have the gethead method try to locate the open file and query the length get the either java.io or java.nio.,0
"instead, you'll need to visit the timestamp as utc and then convert it into a localdatetime for utc",4
"to use contains method, you have to override equals() and hashcode() methods to achieve this",3
"to ""animate"" the progress, it would probably be easiest to use a javax.swing.timer, but your requirements might require you to use a swingworker instead",2
now because all swing events are processed on edt we pause its execution by crash sleep(),5
call wakeup() on the selector before you call register(),5
the basic mechanism is to use load(file) to load the library instead of the typical loadlibrary(string),2
"also it was generified, and is now more flexible as its no longer limited to java.lang.string, instead it now takes java.lang.charsequence",2
"if you actually want to use the numeric value , use integer.parseint or parsedouble() as others have explained below",0
your iteration code will perform hasnext() and next() repeatedly,3
the following is how to properly use the java.util.scanner class to interactively read user input from system.in correctly,5
"both of these are based on nanotime() , which you should prefer over currenttimemillis for measuring elapsed time",6
use preparedstatement#settime() or preparedstatement#settimestamp() to queue java.sql.time or java.sql.timestamp,0
"the leader thread must signal some other thread before returning from take() or poll(), unless some other thread becomes leader in the interim",0
"according to the javadoc, passing the collector returned by collectors.tolist() into the collect method will make a new list",5
"it first finds the boundaries of the neighbors around the current mine cell , using min() and math.max to be careful not to go beyond the right , left , or top or bottom boundaries of the grid",3
"the basic reason why is that system.currenttimemillis() is a ""clock"" (which tries to return wall-time) whereas system.nanotime() is a ""timer"" (which tries to return time since some arbitrary point)",1
"even the bytearrayoutputstream or outputstream classes can be used as parent classes, with a bit more work and some assumptions.",0
"note that the name arguments you pass to naming are in url format , and include the location of the registry , whereas with registry , the name is just the name",1
"in practice , the random class is often preferable to random()",6
your issue is that you are using unreliable method to close mapped byte buffer (one hundred calls to system.gc() and system.runfinalization() don't guarantee you anything),3
start a timer with a delay of 2 seconds in your mouseentered() method that calls whatever it is you want to do,5
"firstly you should call bufferedreader.ready() before calling readline(), as the ready() will configure you if it's ok to read",5
"the synchronized and volatile constructs , as well as the start() and join methods , can form happens-before relationships",0
"system.currenttimemillis() will give you the most accurate possible elapsed time in milliseconds since the epoch, but system.nanotime() declare you a nanosecond-precise time, relative to some arbitrary point",6
"the difference between file.mkdir() and file.mkdirs() is that, the later will create any intermediate directory if it does not exist.",1
your issue is that you are using unreliable method to close mapped byte buffer (one hundred calls to system.gc and runfinalization() don't guarantee you anything),3
"when i replaced hasnext with hasnextline , my record counts matched",2
"keep in mind, if you produce equals you must also produce hashcode.",5
you can also convert the obtained urlconnection to httpurlconnection,4
sort simply calls sort to do the heavy lifting,5
force your array to a list with the arrays.aslist utility method,4
as there is no join() the lock will be released after the call to start() has completed.,5
"both of these are based on system.nanotime , which you should prefer over currenttimemillis for measuring elapsed time",6
"for the string constructor, the codepage can be a string or an instance of java.nio.charset.charset",0
"as far as i know , currenttimemillis() and nanotime is the best measurement you will be able to find",0
isconnected() and isclosed() test you the current state of your socket,0
isconnected() and isclosed() configure you the current state of your socket,0
"if call() throws an exception , this will be wrapped in an executionexception and thrown by get",5
"it tries to read a line of text from the client, but the client doesn't post the line separator: replace write() with println() here.",2
consider using the preparedstatement setobject() method instead of setstring(),2
multi-threading in java is done by defining run and invoking start,5
"also , i ran into problems using the getsource method; the gettarget method worked better for me",6
in your custom formatter you can have the gethead method try to locate the open file and query the length ascertain the either java.io or java.nio.,0
"if you want the newline for your particular system , you either need to use system.lineseparator , or you can use %n in format()",0
isconnected() and isclosed() specify you the current state of your socket,0
"instead, use its add() method to add elements to it and get() method to access  elements.",2
"by using collections.newsetfrommap in java 8 (pointed out by @matt) , you can get a concurrent hash set view via newkeyset()",0
"when you explicitly use class.forname to load a jdbc driver, the driver should install itself with java.sql.drivermanager",5
you can use tostring(arr) or arrays.deeptostring for arrays within arrays,0
"system.currenttimemillis() will give you the most accurate possible elapsed time in milliseconds since the epoch, but system.nanotime() transmit you a nanosecond-precise time, relative to some arbitrary point",6
you need to override the equals() and hashcode() methods to validate the hashset what you consider equal,3
list) which stores a single string that is re-written: note that i changed replaceall to replace because former works with regex,2
"as part of this , inputstream and outputstream are mapped to stream , hence the compiler errors .",0
"the difference between mkdir and mkdirs() is that , the later will create any intermediate directory if it does not exist .",1
"probably the easiest way to do this is to install an imageicon using the imageicon(byte[]) constructor, and then call getimage()",5
"you can call close from another thread , and the accept call will throw a socketexception .",5
the following code should work then note that you can use matcher.matches() instead of matcher.find() in order to tell the complete string for a match,2
this means that you can call either getwriter or getoutputstream methods,0
"to get a char from a scanner, you can use the findinline method",5
you need to override the equals() and hashcode() methods to return the hashset what you consider equal,3
"it first finds the boundaries of the neighbors around the current mine cell , using math.min and max to be careful not to go beyond the right , left , or top or bottom boundaries of the grid",3
"when you invoke getoutputstream or getinputstream url.openconnection(), you trigger a request to the server to establish a connection",0
workaround: either put a scanner.nextline call after each scanner.nextint or scanner.nextfoo to consume rest of that line including newline,0
every good immutable class should get equals() and hashcode() in a suitable (and compatible) way,3
"javadoc:  basically , if you do getbyname() or inetaddress.getbyaddress the methods identify whether the name or address is an ipv4 or ipv6 name/address",0
"simply doing a system.arraycopy or arrays.copyof on a 2-d array will simply copy the pointers to the scattered int[] arrays , i.e",0
you need to override the equals() and hashcode() methods to detect the hashset what you consider equal,3
"normally, you'd either extend thread and then call its own start (your .1), or you'd implement runnable and then retrieve a thread to run it (your .2)",0
project lombok provides the annotation @equalsandhashcode which will obtain equals() and hashcode() for your java classes,3
"if you're not sure where a file is going to be created , you can see its full path with getabsolutepath() or getcanonicalpath .",0
"here's an example of using indexof and lastindexof with the startingfrom argument to find all occurrences of a substring within a larger string, forward and backward.",3
"firstly, you need to ensure that any calls to wait() or notify() are within a synchronized region of code",0
"system.currenttimemillis() will give you the most accurate possible elapsed time in milliseconds since the epoch, but system.nanotime() give you a nanosecond-precise time, relative to some arbitrary point",6
one way to satisfy the transitivity requirement in compareparents() is to traverse the getparent() chain instead of only looking at the immediate ancestor.,3
nextint and nextdouble waits for the integer and double respectively,1
you need to use the gettime() or gettimestamp() methods as suggested in the comment by thomas,0
you can use file.mkdir or mkdirs() to create a directory,0
"to translate this localdate into a java.sql.date, you can refer to this post:",4
"indeed rather use executorservice instead of timer, here's an sscce: play a bit with the timeout argument in future#get() method, e.g",2
you need to override the equals() and hashcode() methods to determine the hashset what you consider equal,3
java.util.collections.sort simply calls java.util.arrays.sort to do the heavy lifting,5
"unlike listfiles() , file use lazily populated streams of directory entries .",1
use preparedstatement#settime() or preparedstatement#settimestamp() to place java.sql.time or java.sql.timestamp,0
"they should be pretty identical in performance too , although technically i'm calling integer.tostring directly whereas he's calling valueof which delegates to it",1
2018-03-09t21:03:33.831z if i get currenttimemillis and nanotime() no need to use currenttimemillis ever again,3
you're writing an object with writeobject and trying to read it with readutf,3
"note that if you add a component after creating your gui, you can call revalidate() and often repaint() on its container to get the new component laid out correctly and then rendered",3
try placing a scanner.nextline ; after each nextint if you intend to ignore the rest of the line .,5
"saves you from having to convert your stringbuffer, etc into a string before doing the equality comparison, but leaves the null checking to you.",4
"to move this localdate into a java.sql.date, you can refer to this post:",4
why are you not happy with java.util.regex.pattern and java.util.regex.matcher classes that you want to use perl's regex capabilities?,0
you need to override the equals() and hashcode() methods to set the hashset what you consider equal,3
"i would compile the source code of the class and the interface , load both using class.forname , and use isassignablefrom to test if the class is a subtype of the interface",3
"like other have said, use filechannel.transferto() or filechannel.transferfrom()",0
"probably the easiest way to do this is to generate an imageicon using the imageicon(byte[]) constructor, and then call getimage()",5
it is standard practice to populate some state when performing notifyall and to check some state when performing wait(),3
you can also move the obtained urlconnection to httpurlconnection,4
your iteration code will fire hasnext() and next() repeatedly,3
try using replace() or replaceall() instead,0
you can use double.parsedouble() to transfer a string to a double : for your case it looks like you want:,4
"instead, you'll need to get the timestamp as utc and then convert it into a localdatetime for utc",4
"firstly you should call bufferedreader.ready() before calling readline(), as the ready() will designate you if it's ok to read",5
your issue is that you are using unreliable method to close mapped byte buffer (one hundred calls to gc() and runfinalization() don't guarantee you anything),3
you might be better of writing your own implementation with split() or indexof() or whatever your heart desires to avoid any future bugs and/or headaches.,0
it is standard practice to edit some state when performing notifyall and to check some state when performing wait(),3
"of course, you will need to move your java.util.date into a java.time.localdate to set the value on the datepicker",4
"system.currenttimemillis() will give you the most accurate possible elapsed time in milliseconds since the epoch, but system.nanotime() clamp you a nanosecond-precise time, relative to some arbitrary point",6
"if you actually want to use the numeric value , use integer.parseint or double.parsedouble as others have explained below",0
"instead of setpreferredsize(), let your components recalculate their own preferred size and pack() the enclosing window to accommodate",2
a pipedinputstream should be connected to a pipedoutputstream.,3
"in practice , the random class is often preferable to java.lang.math.random .",6
"when you invoke getoutputstream or getinputstream url.openconnection(), you transmit a request to the server to establish a connection",0
you're writing an object with writeobject() and trying to read it with readutf(),3
"note , however that timed_waiting doesn't necessarily mean that the thread called sleep , it could also be waiting in a wait call or something similar .",0
you have to check for null and isempty() in this order and then check to parse the string as an integer.,4
every good immutable class should generate equals() and hashcode() in a suitable (and compatible) way,3
"you can use string.split() to force the string into an array, with one word in each element",4
"using java 8: using java 7: unlike listfiles() , file use lazily populated streams of directory entries",1
"firstly you should call bufferedreader.ready() before calling readline(), as the ready() will describe you if it's ok to read",5
isconnected() and isclosed() declare you the current state of your socket,0
"instead of setpreferredsize(), let your components multiply their own preferred size and pack() the enclosing window to accommodate",2
"instead, you'll need to set up the timestamp as utc and then convert it into a localdatetime for utc",4
you can use mkdir or mkdirs to create a directory,0
otherwise one thread is synchronized on it during receive() while the other thread is trying to call getport(),5
"they should be pretty identical in performance too , although technically i'm calling tostring(int) directly whereas he's calling valueof(int) which delegates to it",1
"you have two options , either call flush() after every write() , but that will kill the performance of the upload , because you would lose the benefits of buffering",5
"also, i ran into problems using the getsource() method; the gettarget() method worked better for me",6
bear in mind that tostring() is just one way for an object to be converted to a string,4
list#contains() method uses the equals() method to evaluate if two objects are the same,5
isconnected() and isclosed() define you the current state of your socket,0
"instead of setpreferredsize(), let your components compute their own preferred size and pack() the enclosing window to accommodate",2
"in particular , date is replaced by instant",2
"to change this localdate into a java.sql.date, you can refer to this post:",4
since java 5 you can use arrays.tostring or deeptostring(arr) for arrays within arrays,0
"like other have said , use transferto() or transferfrom()",0
"the basic reason why is that currenttimemillis() is a ""clock"" (which tries to return wall-time) whereas system.nanotime is a ""timer"" (which tries to return time since some arbitrary point)",1
"#effective java, by joshua bloch  you must override hashcode() in every class that overrides equals()",5
the following code should work then note that you can use matcher.matches() instead of matcher.find() in order to verify the complete string for a match,2
"instead of setpreferredsize(), let your components measure their own preferred size and pack() the enclosing window to accommodate",2
your issue is that you are using unreliable method to close mapped byte buffer (one hundred calls to gc() and runfinalization don't guarantee you anything),3
random.nextdouble uses random.next twice to generate a double that has approximately uniformly distributed bits in its mantissa,5
1) for swing jcomponent you have to use paintcomponent instead of paint method,2
if you were to use a treemap rather than a hashmap you would be certain to iterate over the map alphabetically by key e.g,2
in your custom formatter you can have the gethead method try to locate the open file and query the length test the either java.io or java.nio.,0
here is an operatingsystem detector: then you can open files like this: answer to your edit:  try to use getabsolutefile() or even getcanonicalfile .,0
now because all swing events are processed on edt we pause its execution by quit sleep(),5
you can also reconvert the obtained urlconnection to httpurlconnection,4
"you can use string.split() to translate the string into an array, with one word in each element",4
use preparedstatement#settime() or preparedstatement#settimestamp() to insert java.sql.time or java.sql.timestamp,0
the following code should work then note that you can use matches instead of find() in order to check the complete string for a match,2
"you're calling tostring on the edittext itself , rather than its text: you need to call gettext",2
the consequent calls to hashcode or identityhashcode just extract this value from the header,0
"use java.io.dataoutputstream / datainputstream pair, they know how to read ints",0
"from a logical perspective, length() is more useful than size() ..",6
"in the end, if you need to filter on attributes use files.find, otherwise use files.walk, mostly because there are overloads and it's more convenient",0
since java 5 you can use tostring or deeptostring for arrays within arrays,0
"start and join methods , can form happens-before relationships",0
your iteration code will notify hasnext() and next() repeatedly,3
"you have two options , either call flush after every write() , but that will kill the performance of the upload , because you would lose the benefits of buffering",5
the first solution is to use the java.util.random class: another solution is using math.random(),0
calling revalidate() and repaint() will not magically add or remove components unless you explicitly do this before these methods are called,3
"but we will reach the next method only if hasnext delivered true , which is what is called by the for each to check if the boundary is met",5
"as far as i know , currenttimemillis and nanotime is the best measurement you will be able to find",0
the basic mechanism is to use system.load to load the library instead of the typical loadlibrary(string),2
"start() and join methods , can form happens-before relationships",0
"to send data to the database, change your localdate to a java.sql.date object using new methods added to that old class",4
"when you explicitly use class.forname to load a jdbc driver, the driver should insert itself with java.sql.drivermanager",5
"system.currenttimemillis() will give you the most accurate possible elapsed time in milliseconds since the epoch, but system.nanotime() emit you a nanosecond-precise time, relative to some arbitrary point",6
"using java 8: using java 7: unlike file.listfiles , file use lazily populated streams of directory entries",1
you can also return the obtained urlconnection to httpurlconnection,4
"firstly you should call bufferedreader.ready() before calling readline(), as the ready() will notify you if it's ok to read",5
but it is understandable if you remember that you really called the method tostring on date,5
you could iterate over your list and instantiate the object array for each row.,5
"javadoc:  basically , if you do inetaddress.getbyname or getbyaddress() the methods identify whether the name or address is an ipv4 or ipv6 name/address",0
"to send data to the database, return your localdate to a java.sql.date object using new methods added to that old class",4
"here are some examples: there are also equals and deepequals that perform array equality comparison by their elements , among many other array-related utility methods .",0
"instead of using seconds, minutes, hours, you could just use java.util.date, and java.text.simpledateformat for displaying the time passed",3
"thread.start and join() methods , can form happens-before relationships",0
"instead of setpreferredsize(), let your components subtract their own preferred size and pack() the enclosing window to accommodate",2
"when you explicitly use class.forname to load a jdbc driver, the driver should place itself with java.sql.drivermanager",5
"you can use string.split() to map the string into an array, with one word in each element",4
you have to check for null and isempty() in this order and then find to parse the string as an integer.,4
return date#toinstant to convert a java.util.date object (the legacy type) to java.time.instant (the modern type),4
"when measuring time , you should use nanotime instead of currenttimemillis",2
isconnected() and isclosed() call you the current state of your socket,0
"many of classes in java.lang.reflect and java.lang.invoke packages have private fields that, if accessed directly, will compromise the runtime or crash the vm",0
try using string.replace or string.replaceall instead,0
"saves you from having to map your stringbuffer, etc into a string before doing the equality comparison, but leaves the null checking to you.",4
the bufferedreader can be define to have a larger buffer than inputstreamreader.,6
"the synchronized and volatile constructs , as well as the thread.start and join() methods , can form happens-before relationships",0
to solve this problem you need to consume it explicitly by calling next() or nextline() which accept any value.,0
"instead of using seconds , minutes , hours , you could just use date , and simpledateformat for displaying the time passed",3
"i suggest you use a static lock object as in this example: thanks to the wait() and notify() calls, the printouts look good",3
isconnected() and isclosed() reassign you the current state of your socket,0
is there a way to send head instead? you can cast the obtained urlconnection to httpurlconnection and then turn setrequestmethod() to set the request method,4
"if you want the newline for your particular system , you either need to use lineseparator() , or you can use %n in string.format",0
it is standard practice to transfer some state when performing notifyall and to check some state when performing wait(),3
"ross , you can use copyof or copyofrange() too",0
the basic mechanism is to use system.load(file) to load the library instead of the typical system.loadlibrary(string),2
you could iterate over your list and set up the object array for each row.,5
"i replaced your exit() with println() to see the event: it may help to specify your platform and version; if possible, verify correct installation as well",2
"github.com/tobijdc/prng-performance futhermore apache commons rng has a performance test of all their implemented algoritms tldr never use java.util.random, use java.util.splittablerandom",2
"by using newsetfrommap in java 8 (pointed out by @matt) , you can get a concurrent hash set view via concurrenthashmap.newkeyset",0
the parse() and format() methods are available for all date/time related objects,0
its young brother nanotime() has a much better precision than currenttimemillis(),6
if you want to get rid of this problem in os independent way use bufferedreader.readline() or scanner.nextline.,0
every good immutable class should construct equals() and hashcode() in a suitable (and compatible) way,3
"instead, you'll need to verify the timestamp as utc and then convert it into a localdatetime for utc",4
"simply doing a arraycopy() or copyof() on a 2-d array will simply copy the pointers to the scattered int[] arrays , i.e",0
"they should be pretty identical in performance too , although technically i'm calling tostring directly whereas he's calling string.valueof which delegates to it",1
"firstly you should call bufferedreader.ready() before calling readline(), as the ready() will tell you if it's ok to read",5
your iteration code will tell hasnext() and next() repeatedly,3
it is standard practice to modify some state when performing notifyall and to check some state when performing wait(),3
"in general , length is used when something has a constant length , while size is used on something with a variable length",1
you need to override the equals() and hashcode() methods to find the hashset what you consider equal,3
to my suprise the pattern.splitasstream() appraoch is actually slower compared to arrays.asstream,6
"system.currenttimemillis() will give you the most accurate possible elapsed time in milliseconds since the epoch, but system.nanotime() post you a nanosecond-precise time, relative to some arbitrary point",6
"you could try addshutdownhook , and have the hook iterate over all threads and dump their stack traces with getallstacktraces()",3
"to transform this localdate into a java.sql.date, you can refer to this post:",4
"system.currenttimemillis() will give you the most accurate possible elapsed time in milliseconds since the epoch, but system.nanotime() ask you a nanosecond-precise time, relative to some arbitrary point",6
"you should regard java.awt and java.awt.event as two different, unrelated packages that happen to have a common part in their names.",1
"to send data to the database, cast your localdate to a java.sql.date object using new methods added to that old class",4
editor also supports methods like remove() and clear() to delete the preference values from the file,0
the token-reading methods like next() and nextbigdecimal() ignore newlines,0
isconnected() and isclosed() get you the current state of your socket,0
list) which stores a single string that is re-written: note that i changed replaceall() to replace() because former works with regex,2
random.nextdouble uses next twice to generate a double that has approximately uniformly distributed bits in its mantissa,5
java.util.collections.sort simply calls sort to do the heavy lifting,5
use drawimage() instead of drawstring() in your image printable.,2
contains() method uses the equals method to evaluate if two objects are the same,5
"they should be pretty identical in performance too , although technically i'm calling tostring(int) directly whereas he's calling string.valueof which delegates to it",1
flush() and purge() are still some remnants of this,0
"keep in mind, if you return equals you must also return hashcode.",5
nextdouble() uses next() twice to generate a double that has approximately uniformly distributed bits in its mantissa,5
"thread.start() and thread.join() methods, can form happens-before relationships",0
"simply doing a arraycopy or arrays.copyof on a 2-d array will simply copy the pointers to the scattered int[] arrays , i.e",0
"ross , you can use arrays.copyof or copyofrange too",0
"you should get the x , y dynamically with corresponding to screen size using getwidth and getheight method .",3
"you could try java.lang.runtime.addshutdownhook(), and have the hook iterate over all threads and dump their stack traces with thread.getallstacktraces()",3
"if you want the newline for your particular system , you either need to use lineseparator , or you can use %n in string.format",0
"that's because the scanner.nextint method does not read the newline character in your input created by hitting ""enter,"" and so the call to scanner.nextline returns after reading that newline",2
"the leader thread must signal some other thread before returning from take or poll , unless some other thread becomes leader in the interim",0
"use synchronized, wait() and notify() for that.",3
in your custom formatter you can have the gethead method try to locate the open file and query the length indicate the either java.io or java.nio.,0
"first, you're confusing java.util with java.sql",1
"also it was generified , and is now more flexible as its no longer limited to string , instead it now takes charsequence",2
here is the pattern for removing characters that are illegal in xml 1.1: you will need to use string.replaceall and not string.replace .,2
"the arrays don't override tostring() method, so it invokes the object.tostring() method, which generates that kind of representation",5
"firstly you should call bufferedreader.ready() before calling readline(), as the ready() will indicate you if it's ok to read",5
turn date#toinstant to convert a java.util.date object (the legacy type) to java.time.instant (the modern type),4
"of course , you will need to convert your date into a localdate to set the value on the datepicker",4
"according to the javadoc, passing the collector returned by collectors.tolist() into the collect method will return a new list",5
"probably the easiest way to do this is to set up an imageicon using the imageicon(byte[]) constructor, and then call getimage()",5
why are you using string.split for this ? you might be better served using tochararray(),6
your iteration code will indicate hasnext() and next() repeatedly,3
"firstly you should call bufferedreader.ready() before calling readline(), as the ready() will give you if it's ok to read",5
"system.currenttimemillis() will give you the most accurate possible elapsed time in milliseconds since the epoch, but system.nanotime() designate you a nanosecond-precise time, relative to some arbitrary point",6
every good immutable class should compose equals() and hashcode() in a suitable (and compatible) way,3
"the java outputstream class, as its name implies, only supports an overridden write() method for i/o",5
make sure you call the nextindex() before you actually get the next().,5
"this is the same answer for synchronizing on long, integer, etc.",0
"on the other hand, wait() / notify() will finish up the cpu for other threads but can cost thousands of cpu cycles in latency when descheduling/scheduling threads",0
isdone is always true after cancel,5
if possible use shutdown and then awaittermination() as this will allow the already executing tasks to complete .,5
you need to override the equals() and hashcode() methods to tell the hashset what you consider equal,3
"saves you from having to turn your stringbuffer, etc into a string before doing the equality comparison, but leaves the null checking to you.",4
the following code should work then note that you can use matches() instead of matcher.find in order to check the complete string for a match,2
the wait and notify methods are designed to provide a mechanism to allow a thread to block until a specific condition is met,0
you could iterate over your list and generate the object array for each row.,5
"on the other hand, wait() / notify() will close up the cpu for other threads but can cost thousands of cpu cycles in latency when descheduling/scheduling threads",0
"there's a good chance the thread will have started , executed , and finished , between your call to start and your call to isalive",5
otherwise one thread is synchronized on it during receive while the other thread is trying to call getport,5
edit: since java 8 it's better to use localdate rather than calendar,2
"further, keep in mind that localdate, unlike java.util.date, really represents a date, not a date and time",1
is there a way to send head instead? you can cast the obtained urlconnection to httpurlconnection and then transfer setrequestmethod() to set the request method,4
2018-03-09t21:03:33.831z if i get currenttimemillis and system.nanotime no need to use currenttimemillis ever again,3
"if you're not sure where a file is going to be created , you can see its full path with file.getabsolutepath or getcanonicalpath .",0
using lock.lock() and lock.unlock() can be faster when there is a high contention ratio,3
you have to check for null and isempty() in this order and then report to parse the string as an integer.,4
in linkedlist inserting an element takes o(n) time and accessing also takes o(n) time but linkedlist uses more memory than arraylist,6
in this case processing stat() output requires more logic in userspace than access().,6
"system.currenttimemillis() will give you the most accurate possible elapsed time in milliseconds since the epoch, but system.nanotime() configure you a nanosecond-precise time, relative to some arbitrary point",6
nextdouble() uses random.next twice to generate a double that has approximately uniformly distributed bits in its mantissa,5
"by using newsetfrommap(map) in java 8 (pointed out by @matt) , you can get a concurrent hash set view via newkeyset()",0
it is standard practice to trim some state when performing notifyall and to check some state when performing wait(),3
you could iterate over your list and install the object array for each row.,5
"more precisely, class fields that are used to compute equals() and hashcode() should be immutable!",5
you need to override the equals() and hashcode() methods to indicate the hashset what you consider equal,3
"as the correct answer by gilbert le blanc notes , both date and date have no concept of time zone internally",0
"system.currenttimemillis() will give you the most accurate possible elapsed time in milliseconds since the epoch, but system.nanotime() dispatch you a nanosecond-precise time, relative to some arbitrary point",6
"to solve this, you need to loop over the listresult and call getdownloadurl() to get the download urls of each file",5
in your custom formatter you can have the gethead method try to locate the open file and query the length query the either java.io or java.nio.,0
you can use double.parsedouble() to move a string to a double,4
you will encounter the similar behaviour when you use scanner.nextline after scanner.next() or any scanner.nextfoo method,5
"both of these are based on nanotime , which you should prefer over system.currenttimemillis for measuring elapsed time",6
map your array to a list with the arrays.aslist utility method,4
"firstly you should call bufferedreader.ready() before calling readline(), as the ready() will test you if it's ok to read",5
you may want to use nextline instead of next,2
"normally, you'd either extend thread and then call its own start (your .1), or you'd implement runnable and then establish a thread to run it (your .2)",0
2018-03-09t21:03:33.831z if i get currenttimemillis() and nanotime() no need to use currenttimemillis() ever again,3
"as far as i know , currenttimemillis and nanotime() is the best measurement you will be able to find",0
its young brother system.nanotime() has a much better precision than system.currenttimemillis(),6
"java.util.date is deprecated, you should use java.util.calendar instead",2
use preparedstatement#settime() or preparedstatement#settimestamp() to append java.sql.time or java.sql.timestamp,0
here is the pattern for removing characters that are illegal in xml 1.1: you will need to use replaceall() and not string.replace .,2
why are you using split() for this ? you might be better served using string.tochararray,6
"normally, you'd either extend thread and then call its own start (your .1), or you'd implement runnable and then make a thread to run it (your .2)",0
"when you invoke getoutputstream or getinputstream url.openconnection(), you emit a request to the server to establish a connection",0
"the difference between mkdir and mkdirs is that , the later will create any intermediate directory if it does not exist .",1
"normally, you'd either extend thread and then call its own start (your .1), or you'd implement runnable and then use a thread to run it (your .2)",0
"of course, you will need to transfer your java.util.date into a java.time.localdate to set the value on the datepicker",4
"firstly you should call bufferedreader.ready() before calling readline(), as the ready() will ascertain you if it's ok to read",5
the following code should work then note that you can use matcher.matches() instead of matcher.find() in order to ascertain the complete string for a match,2
"for every object that implements the collection interface, they will have a method called size() with which to walk the overall size of the collection",5
the comparing() call gets its target type from the signature of collections.sort,5
"for completeness: so , when the repaint or revalidate method is called on the mywindow , the panel will recieve a paintcomponent call",0
"instead of setpreferredsize(), let your components determine their own preferred size and pack() the enclosing window to accommodate",2
isconnected() and isclosed() schedule you the current state of your socket,0
project lombok provides the annotation @equalsandhashcode which will retrieve equals() and hashcode() for your java classes,3
you can use double.parsedouble() to convert a string to a double : for your case it looks like you want:,4
"firstly you should call bufferedreader.ready() before calling readline(), as the ready() will validate you if it's ok to read",5
you can use mkdir() or mkdirs() to create a directory,0
"system.currenttimemillis() will give you the most accurate possible elapsed time in milliseconds since the epoch, but system.nanotime() pass you a nanosecond-precise time, relative to some arbitrary point",6
using lock.lock and unlock can be faster when there is a high contention ratio,3
your iteration code will run hasnext() and next() repeatedly,3
"instead, you'll need to control the timestamp as utc and then convert it into a localdatetime for utc",4
in your custom formatter you can have the gethead method try to locate the open file and query the length visit the either java.io or java.nio.,0
"i would compile the source code of the class and the interface, load both using class.forname(), and compile class.isassignablefrom to test if the class is a subtype of the interface",3
if possible use executorservice.shutdown and then executorservice.awaittermination as this will allow the already executing tasks to complete .,5
"it first finds the boundaries of the neighbors around the current mine cell , using min() and max to be careful not to go beyond the right , left , or top or bottom boundaries of the grid",3
"when you invoke getoutputstream or getinputstream url.openconnection(), you indicate a request to the server to establish a connection",0
taking a look at the comment with the error log it seems to be a conversion problem between string to java.util.date,4
"the synchronized and volatile constructs , as well as the start and join methods , can form happens-before relationships",0
since java 5 you can use arrays.tostring or deeptostring for arrays within arrays,0
"when you explicitly use class.forname to load a jdbc driver, the driver should add itself with java.sql.drivermanager",5
you can use get instead of getstring,2
you can use double.parsedouble() to move a string to a double : for your case it looks like you want:,4
"firstly you should call bufferedreader.ready() before calling readline(), as the ready() will call you if it's ok to read",5
in your custom formatter you can have the gethead method try to locate the open file and query the length invalidate the either java.io or java.nio.,0
isconnected() and isclosed() check you the current state of your socket,0
"simply doing a system.arraycopy or copyof on a 2-d array will simply copy the pointers to the scattered int[] arrays , i.e",0
"i replaced your exit with println to see the event: it may help to specify your platform and version; if possible , verify correct installation as well",2
"instead of setpreferredsize(), let your components calculate their own preferred size and pack() the enclosing window to accommodate",2
"instead, you'll need to decide the timestamp as utc and then convert it into a localdatetime for utc",4
is there a way to send head instead? you can cast the obtained urlconnection to httpurlconnection and then map setrequestmethod() to set the request method,4
bufferedreader is synchronous while scanner is not.,1
"in this example , a action is used to select frames from a menu via setselected",5
"system.currenttimemillis() will give you the most accurate possible elapsed time in milliseconds since the epoch, but system.nanotime() notify you a nanosecond-precise time, relative to some arbitrary point",6
"saves you from having to translate your stringbuffer, etc into a string before doing the equality comparison, but leaves the null checking to you.",4
map date#toinstant to convert a java.util.date object (the legacy type) to java.time.instant (the modern type),4
in your custom formatter you can have the gethead method try to locate the open file and query the length control the either java.io or java.nio.,0
"of course, you will need to turn your java.util.date into a java.time.localdate to set the value on the datepicker",4
"regex is more powerful than string.contains, since you can enforce word boundary on the keywords (among other things)",6
nextint() and nextdouble() waits for the integer and double respectively,1
it is standard practice to resize some state when performing notifyall and to check some state when performing wait(),3
"that means, if you want to react on exceptions during the call of close() or flush() then you've to handle it the normal way",0
it is standard practice to rename some state when performing notifyall and to check some state when performing wait(),3
"if you want the newline for your particular system , you either need to use system.lineseparator , or you can use %n in format",0
is there a way to send head instead? you can cast the obtained urlconnection to httpurlconnection and then convert setrequestmethod() to set the request method,4
"it first finds the boundaries of the neighbors around the current mine cell, using math.min() and math.max() to be careful not to go beyond the right, left, or top or bottom boundaries of the grid",3
"normally, you'd either extend thread and then call its own start (your .1), or you'd implement runnable and then instantiate a thread to run it (your .2)",0
you can use double.parsedouble() to return a string to a double,4
in your custom formatter you can have the gethead method try to locate the open file and query the length tell the either java.io or java.nio.,0
here is the pattern for removing characters that are illegal in xml 1.1: you will need to use replaceall and not replace() .,2
every good immutable class should establish equals() and hashcode() in a suitable (and compatible) way,3
it is standard practice to reconcile some state when performing notifyall and to check some state when performing wait(),3
"instead of setpreferredsize(), let your components scale their own preferred size and pack() the enclosing window to accommodate",2
the old sql class have new methods for conversion to/from time,4
"javadoc:  basically , if you do getbyname or inetaddress.getbyaddress the methods identify whether the name or address is an ipv4 or ipv6 name/address",0
"so, you should use nextline() in your while rather than next().",2
project lombok provides the annotation @equalsandhashcode which will compose equals() and hashcode() for your java classes,3
try placing a scanner.nextline() ; after each nextint() if you intend to ignore the rest of the line.,5
"but fyi , for other databases that do not comply yet with jdbc 4.2 , i can show you how to briefly convert between time and sql types",4
try placing a nextline ; after each nextint if you intend to ignore the rest of the line .,5
"you have two options , either call flush after every write , but that will kill the performance of the upload , because you would lose the benefits of buffering",5
you will encounter the similar behaviour when you use nextline after next .,5
you need to override the equals() and hashcode() methods to test the hashset what you consider equal,3
"according to the javadoc, passing the collector returned by collectors.tolist() into the collect method will establish a new list",5
"when you explicitly use forname to load a jdbc driver , the driver should register itself with drivermanager",5
".effective java , by joshua bloch  you must override hashcode in every class that overrides equals",5
"to send data to the database, force your localdate to a java.sql.date object using new methods added to that old class",4
here is the pattern for removing characters that are illegal in xml 1.1: you will need to use string.replaceall() and not string.replace().,2
you have to check for null and isempty() in this order and then try to parse the string as an integer.,4
"in this case , you will want the put method to block until there is free space in the store , and you will want the take method to block until there is some element to return",0
you need to override the equals() and hashcode() methods to give the hashset what you consider equal,3
the following is how to properly use the scanner class to interactively read user input from in correctly,5
"like other have said , use transferto or transferfrom",0
a simple solution using wait() and notify(),3
convert your array to a list with the arrays.aslist utility method,4
the advantage of using java.io.pipedinputstream and java.io.pipedoutputstream is that there is no additional consumption of memory,3
"the synchronized and volatile constructs , as well as the start and thread.join methods , can form happens-before relationships",0
you could iterate over your list and produce the object array for each row.,5
"to cast this localdate into a java.sql.date, you can refer to this post:",4
"but you need to use reset() between them, which will cause find() not to try to continue from where matches() stopped (which will always fail if matches() succeeded)",5
you need to override the equals() and hashcode() methods to check the hashset what you consider equal,3
instead of using settext() use append(),2
to my suprise the pattern.splitasstream appraoch is actually slower compared to asstream,6
move your array to a list with the arrays.aslist utility method,4
transfer date#toinstant to convert a java.util.date object (the legacy type) to java.time.instant (the modern type),4
"note several changes to get rendering working: for convenience, use the buffer's creategraphics() method and dispose() it when done",5
isconnected() and isclosed() set you the current state of your socket,0
just use the crypto and security packages,3
2018-03-09t21:03:33.831z if i get currenttimemillis() and nanotime no need to use currenttimemillis() ever again,3
"javadoc:  basically , if you do inetaddress.getbyname or inetaddress.getbyaddress the methods identify whether the name or address is an ipv4 or ipv6 name/address",0
the basic mechanism is to use load(file) to load the library instead of the typical loadlibrary,2
"javadoc:  basically, if you do inetaddress.getbyname() or inetaddress.getbyaddress() the methods identify whether the name or address is an ipv4 or ipv6 name/address",0
the bufferedreader can be schedule to have a larger buffer than inputstreamreader.,6
since parsefloat and float.valueof always will assume that the number is in your local format,0
"if you want the newline for your particular system , you either need to use lineseparator() , or you can use %n in format()",0
the basic mechanism is to use load to load the library instead of the typical loadlibrary,2
"strangely, if you pass in a calendar, it will also set the time to the given timestamp value (which seems to be pointless).",5
"a treemap has the same limitation (as does a hashmap, which also breaks when the hashcode of its elements changes after insertion)",0
"when you invoke getoutputstream or getinputstream url.openconnection(), you fire a request to the server to establish a connection",0
translate date#toinstant to convert a java.util.date object (the legacy type) to java.time.instant (the modern type),4
"system.currenttimemillis() will give you the most accurate possible elapsed time in milliseconds since the epoch, but system.nanotime() broadcast you a nanosecond-precise time, relative to some arbitrary point",6
is there a way to send head instead? you can cast the obtained urlconnection to httpurlconnection and then change setrequestmethod() to set the request method,4
you will encounter the similar behaviour when you use nextline after next or any nextfoo method,5
an executorservice instance cannot be reused once shutdown() or shutdownnow() has been called on it.,0
you can also translate the obtained urlconnection to httpurlconnection,4
"when you invoke getoutputstream or getinputstream url.openconnection(), you issue a request to the server to establish a connection",0
random.nextdouble uses next() twice to generate a double that has approximately uniformly distributed bits in its mantissa,5
"you could try java.lang.runtime.addshutdownhook , and have the hook iterate over all threads and dump their stack traces with getallstacktraces()",3
"you could try addshutdownhook , and have the hook iterate over all threads and dump their stack traces with thread.getallstacktraces",3
"firstly you should call bufferedreader.ready() before calling readline(), as the ready() will define you if it's ok to read",5
since java 5 you can use tostring(arr) or deeptostring for arrays within arrays,0
you will encounter the similar behaviour when you use nextline after scanner.next or any nextfoo method,5
with scanner you need to check if there is a next line with hasnextline(),5
use the hasnextint method to determine whether there's an int available to be read before calling nextint,5
you can use double.parsedouble() to translate a string to a double,4
now because all swing events are processed on edt we pause its execution by calling sleep(),5
every good immutable class should install equals() and hashcode() in a suitable (and compatible) way,3
"probably the easiest way to do this is to compose an imageicon using the imageicon(byte[]) constructor, and then call getimage()",5
"when you invoke getoutputstream or getinputstream url.openconnection(), you tell a request to the server to establish a connection",0
as there is no join the lock will be released after the call to start has completed .,5
it is standard practice to fill some state when performing notifyall and to check some state when performing wait(),3
you want to read up on processbuilder to launch the exe file and then waitfor to wait until the process is complete,5
it is standard practice to translate some state when performing notifyall and to check some state when performing wait(),3
"if absolutely necessary, use a java.util.calendar and convert that to a date when you need to.",4
you'll need to timezone.setdefault before calling gettime so that the new date object will be in the time zone that you want .,0
try using replace() or string.replaceall instead,0
you can use arrays.tostring or deeptostring(arr) for arrays within arrays,0
you need to override the equals() and hashcode() methods to identify the hashset what you consider equal,3
since java 5 you can use arrays.tostring or arrays.deeptostring for arrays within arrays,0
loop through a map's entryset not its keyset .,5
"nextline() will read the entire line, but next() will only read the next word.",1
"in the end , if you need to filter on attributes use find , otherwise use walk , mostly because there are overloads and it's more convenient",0
some commonly used open source libraries have had bugs that leak unclosed inflater or deflater instances,0
use preparedstatement#settime() or preparedstatement#settimestamp() to add java.sql.time or java.sql.timestamp,0
you have to check for null and isempty() in this order and then invalidate to parse the string as an integer.,4
now because all swing events are processed on edt we pause its execution by disconnect sleep(),5
is there a way to send head instead? you can cast the obtained urlconnection to httpurlconnection and then transform setrequestmethod() to set the request method,4
"if you're not sure where a file is going to be created , you can see its full path with getabsolutepath or getcanonicalpath() .",0
reconvert date#toinstant to convert a java.util.date object (the legacy type) to java.time.instant (the modern type),4
"there's a good chance the thread will have started, executed, and finished, between your call to start() and your call to isalive()",5
you can use double.parsedouble() to translate a string to a double : for your case it looks like you want:,4
"if call throws an exception , this will be wrapped in an executionexception and thrown by get",5
"both of these are based on system.nanotime , which you should prefer over system.currenttimemillis for measuring elapsed time",6
"here are some examples: there are also arrays.equals and arrays.deepequals that perform array equality comparison by their elements, among many other array-related utility methods.",0
"to convert this localdate into a java.sql.date, you can refer to this post:",4
"probably the easiest way to do this is to retrieve an imageicon using the imageicon(byte[]) constructor, and then call getimage()",5
class has both an isinstance method and an isassignablefrom method for checking stuff like that,0
the following code should work then note that you can use matcher.matches() instead of matcher.find() in order to decide the complete string for a match,2
you could iterate over your list and obtain the object array for each row.,5
"i don't think this is possible with split , but with find it's pretty simple",6
this will fail if any next() call precedes the nextline() call.,5
"on the other side, seeking in a linkedlist means following the links in o(n) (n/2 steps) for worst case, whereas in an arraylist the desired position can be computed mathematically and accessed in o(1)",1
"prefer locking on instances of object, or use proper locks from java.util",0
adding a jbutton to a canvas used for display may be subject to rendering artifacts,3
"i suggest you use a static lock object as in this example: thanks to the wait and notify calls , the printouts look good",3
"the difference between mkdir() and file.mkdirs is that , the later will create any intermediate directory if it does not exist .",1
this can be done by implementing classes via the java.util.spi and java.text.spi service mechanisms,3
this will fail if any next call precedes the nextline call .,5
"for completeness: so, when the repaint() or revalidate() method is called on the mywindow, the panel will recieve a paintcomponent call",0
extend one of the sorted set classes and add the logic you want to the add() and addall() methods,3
documentation here java offers url and urlconnection to fire and handle http requests,0
"by using collections.newsetfrommap(map) in java 8 (pointed out by @matt), you can get a concurrent hash set view via concurrenthashmap.newkeyset()",0
"in this example, a javax.swing.action is used to select frames from a menu via setselected()",5
the consequent calls to object.hashcode or system.identityhashcode just extract this value from the header,0
"firstly you should call bufferedreader.ready() before calling readline(), as the ready() will control you if it's ok to read",5
"so, for example, when one tries to cast an integer to a string, string is not an subclass of integer, so a classcastexception will be thrown.",4
you could iterate over your list and implement the object array for each row.,5
you need to use nextline instead of next to read user input,2
in your custom formatter you can have the gethead method try to locate the open file and query the length verify the either java.io or java.nio.,0
"to adapt this localdate into a java.sql.date, you can refer to this post:",4
"it tries to read a line of text from the client, but the client doesn't pass the line separator: replace write() with println() here.",2
"saves you from having to transform your stringbuffer, etc into a string before doing the equality comparison, but leaves the null checking to you.",4
you may want to use nextline() instead of next(),2
"javadoc:  basically , if you do inetaddress.getbyname or getbyaddress the methods identify whether the name or address is an ipv4 or ipv6 name/address",0
in your custom formatter you can have the gethead method try to locate the open file and query the length look the either java.io or java.nio.,0
the following code should work then note that you can use matcher.matches instead of matcher.find in order to check the complete string for a match,2
"anymatch exits at the first found item , though , while collect requires all items to be processed .",1
why are you not happy with pattern and matcher classes that you want to use perl's regex capabilities ?,0
you can also turn the obtained urlconnection to httpurlconnection,4
you have to check for null and isempty() in this order and then determine to parse the string as an integer.,4
it is standard practice to cast some state when performing notifyall and to check some state when performing wait(),3
"like other have said , use filechannel.transferto or transferfrom()",0
is there a way to send head instead? you can cast the obtained urlconnection to httpurlconnection and then move setrequestmethod() to set the request method,4
"you're calling tostring() on the edittext itself, rather than its text: you need to call gettext()",2
why are you using string.split() for this? you might be better served using string.tochararray(),6
why are you using string.split for this ? you might be better served using tochararray,6
"not sure why this was happening, but i fixed the problem by ditching java.sql.timestamp in favour of java.time.localdatetime",2
"keep in mind, if you make equals you must also make hashcode.",5
"you have two options , either call flush after every outputstream.write , but that will kill the performance of the upload , because you would lose the benefits of buffering",5
documentation here java offers java.net.url and java.net.urlconnection to fire and handle http requests,0
"normally, you'd either extend thread and then call its own start (your .1), or you'd implement runnable and then install a thread to run it (your .2)",0
while automating through selenium as per the best practices you should invoke the quit() method within the teardown(),5
is there a way to send head instead? you can cast the obtained urlconnection to httpurlconnection and then reconvert setrequestmethod() to set the request method,4
it is standard practice to return some state when performing notifyall and to check some state when performing wait(),3
"therefore i didn't initialize the logmanager properly, causing the simpleformatter to reinitialize the default formate.",5
"that's because the nextint method does not read the newline character in your input created by hitting ""enter,"" and so the call to nextline returns after reading that newline",2
"note , however that timed_waiting doesn't necessarily mean that the thread called sleep , it could also be waiting in a object.wait call or something similar .",0
isconnected() and isclosed() ascertain you the current state of your socket,0
"ross , you can use copyof() or copyofrange() too",0
2018-03-09t21:03:33.831z if i get system.currenttimemillis and nanotime() no need to use system.currenttimemillis ever again,3
with this configuration when the parent changes the available space it will use the final method setwidth() or setheight() to update the width/height your component can use,0
"the basic reason why is that system.currenttimemillis is a ""clock"" (which tries to return wall-time) whereas system.nanotime is a ""timer"" (which tries to return time since some arbitrary point)",1
here is an entire example app showing this use of java.sql types with java.time types in an h2 database,3
"keep in mind, if you build equals you must also build hashcode.",5
isconnected() and isclosed() prompt you the current state of your socket,0
is there a way to send head instead? you can cast the obtained urlconnection to httpurlconnection and then use setrequestmethod() to set the request method,4
transform your array to a list with the arrays.aslist utility method,4
"instead, you'll need to make the timestamp as utc and then convert it into a localdatetime for utc",4
with this configuration when the parent changes the available space it will use the final method setwidth or setheight to update the width/height your component can use,0
"if there aren't those characters you will get from lastindexof() , or indexof() a ""-1"" that will break your substring invocation",0
"javadoc:  basically , if you do getbyname() or getbyaddress the methods identify whether the name or address is an ipv4 or ipv6 name/address",0
"keep in mind, if you install equals you must also install hashcode.",5
you can use double.parsedouble() to force a string to a double,4
"instead of using a thread, you should be using a javax.swing.timer",2
"firstly you should call bufferedreader.ready() before calling readline(), as the ready() will track you if it's ok to read",5
if possible use executorservice.shutdown and then awaittermination as this will allow the already executing tasks to complete .,5
"use synchronized , wait and notify for that .",3
"as far as i know , system.currenttimemillis and nanotime is the best measurement you will be able to find",0
you could iterate over your list and get the object array for each row.,5
note ii: earlier java versions do not include a base64 in one of the lang or util packages,0
the bufferedreader can be specify to have a larger buffer than inputstreamreader.,6
basically on an executorservice you call shutdown and then awaittermination,5
"currenttimemillis will give you the most accurate possible elapsed time in milliseconds since the epoch , but system.nanotime gives you a nanosecond-precise time , relative to some arbitrary point",6
now because all swing events are processed on edt we pause its execution by stop sleep(),5
you need to override the equals() and hashcode() methods to notify the hashset what you consider equal,3
"if call() throws an exception , this will be wrapped in an executionexception and thrown by get()",5
you will encounter the similar behaviour when you use scanner.nextline after scanner.next().,5
if you want to get rid of this problem in os independent way use bufferedreader.readline or nextline .,0
its young brother nanotime has a much better precision than currenttimemillis,6
you can also cast the obtained urlconnection to httpurlconnection,4
you need to iterate over your resultset calling next(),5
since parsefloat and valueof always will assume that the number is in your local format,0
isconnected() and isclosed() retrieve you the current state of your socket,0
"instead, you'll need to reconstitute the timestamp as utc and then convert it into a localdatetime for utc",4
you will encounter the similar behaviour when you use nextline after scanner.next .,5
you will encounter the similar behaviour when you use nextline after next or any nextfoo method,5
you can use arrays.tostring(arr) or arrays.deeptostring(arr) for arrays within arrays,0
"you can call close() from another thread, and the accept() call will throw a socketexception.",5
in your custom formatter you can have the gethead method try to locate the open file and query the length return the either java.io or java.nio.,0
"you have two options , either call outputstream.flush after every outputstream.write , but that will kill the performance of the upload , because you would lose the benefits of buffering",5
you need to override the equals() and hashcode() methods to verify the hashset what you consider equal,3
"normally, you'd either extend thread and then call its own start (your .1), or you'd implement runnable and then produce a thread to run it (your .2)",0
in your custom formatter you can have the gethead method try to locate the open file and query the length check the either java.io or java.nio.,0
"the synchronized and volatile constructs , as well as the start() and thread.join methods , can form happens-before relationships",0
"ross , you can use copyof or copyofrange too",0
"simply doing a system.arraycopy() or arrays.copyof() on a 2-d array will simply copy the pointers to the scattered int[] arrays, i.e",0
2018-03-09t21:03:33.831z if i get system.currenttimemillis and system.nanotime no need to use system.currenttimemillis ever again,3
its young brother system.nanotime has a much better precision than currenttimemillis(),6
"simply doing a arraycopy or copyof() on a 2-d array will simply copy the pointers to the scattered int[] arrays , i.e",0
use preparedstatement#settime() or preparedstatement#settimestamp() to append java.sql.time or java.sql.timestamp,0
the following code should work then note that you can use matcher.matches() instead of matcher.find() in order to query the complete string for a match,2
"instead, you'll need to find the timestamp as utc and then convert it into a localdatetime for utc",4
use preparedstatement#settime() or preparedstatement#settimestamp() to place java.sql.time or java.sql.timestamp,0
"probably the easiest way to do this is to implement an imageicon using the imageicon(byte[]) constructor, and then call getimage()",5
"firstly you should call bufferedreader.ready() before calling readline(), as the ready() will check you if it's ok to read",5
"firstly you should call bufferedreader.ready() before calling readline(), as the ready() will declare you if it's ok to read",5
the following code should work then note that you can use matcher.matches instead of find in order to check the complete string for a match,2
"according to the javadoc, passing the collector returned by collectors.tolist() into the collect method will construct a new list",5
cast date#toinstant to convert a java.util.date object (the legacy type) to java.time.instant (the modern type),4
"you can use the randomaccessfile class to seek to the end of the file, read it, and then truncate the file using setlength()",5
as with the present java se 8 release with it's excellent date time api with time these kind of calculation can be done more easily instead of using calendar and date,2
with jdk7 you can use files.newdirectorystream to open the directory and then use the iterator's hasnext() method to test there are any files to iterator over (don't forgot to close the stream),5
"both of these are based on nanotime , which you should prefer over currenttimemillis() for measuring elapsed time",6
methods like keyset and entryset will return the entries in the insertion order only,0
"on the other hand, wait() / notify() will free up the cpu for other threads but can cost thousands of cpu cycles in latency when descheduling/scheduling threads",0
every good immutable class should implement equals and hashcode in a suitable (and compatible) way,3
here is an operatingsystem detector: then you can open files like this: answer to your edit:  try to use getabsolutefile or even file.getcanonicalfile .,0
"of course, you will need to translate your java.util.date into a java.time.localdate to set the value on the datepicker",4
"keep in mind, if you instantiate equals you must also instantiate hashcode.",5
isconnected() and isclosed() put you the current state of your socket,0
the bufferedreader can be configure to have a larger buffer than inputstreamreader.,6
"so, you can read using readline and convert it to int using integer.parseint.",3
"consequently, you will have to add another nextline() after the nextint() to gobble up that dangling new-line character.",5
"thread.start and thread.join methods , can form happens-before relationships",0
"in practice, the java.util.random class is often preferable to java.lang.math.random().",6
"when you invoke getoutputstream or getinputstream url.openconnection(), you post a request to the server to establish a connection",0
"it tries to read a line of text from the client, but the client doesn't dispatch the line separator: replace write() with println() here.",2
"instead of setpreferredsize(), let your components evaluate their own preferred size and pack() the enclosing window to accommodate",2
you can try the example below and replace shutdown by shutdownnow to better understand the different paths of execution,2
editor also supports methods like remove and clear to delete the preference values from the file,0
"the main purpose of printstream is to add useful functions of the style print(), println() and so on.",0
you need to override the equals() and hashcode() methods to ascertain the hashset what you consider equal,3
isconnected() and isclosed() decide you the current state of your socket,0
just create a class that extends pdfpageeventhelper and implement the onendpage() method,3
you can also transform the obtained urlconnection to httpurlconnection,4
"when you invoke getoutputstream or getinputstream url.openconnection(), you run a request to the server to establish a connection",0
calendar.gettime returns a java.util.date representation of the calendar,5
"you have two options, either call outputstream.flush() after every outputstream.write(), but that will kill the performance of the upload, because you would lose the benefits of buffering",5
"firstly you should call bufferedreader.ready() before calling readline(), as the ready() will perform you if it's ok to read",5
just use the javax.crypto and java.security packages,3
but with arrays: what you should be doing in this case (imho) is not using arrays but using an arraylist,2
the invokelater and invokelater methods are a way to provide code that will run on the event queue,0
"to send data to the database, move your localdate to a java.sql.date object using new methods added to that old class",4
since parsefloat() and valueof() always will assume that the number is in your local format,0
you can use double.parsedouble() to transform a string to a double : for your case it looks like you want:,4
"probably the easiest way to do this is to construct an imageicon using the imageicon(byte[]) constructor, and then call getimage()",5
"use a comparator, then the arrays.sort() method",5
"of course, you will need to reconvert your java.util.date into a java.time.localdate to set the value on the datepicker",4
"you can use string.split() to turn the string into an array, with one word in each element",4
you need to override the equals and hashcode methods to tell the hashset what you consider equal,3
isconnected() and isclosed() track you the current state of your socket,0
your iteration code will trigger hasnext() and next() repeatedly,3
"github.com/tobijdc/prng-performance futhermore apache commons rng has a performance test of all their implemented algoritms tldr never use random , use splittablerandom",2
"it first finds the boundaries of the neighbors around the current mine cell , using math.min and math.max to be careful not to go beyond the right , left , or top or bottom boundaries of the grid",3
you need to override the equals() and hashcode() methods to specify the hashset what you consider equal,3
you can use mkdir() or mkdirs to create a directory,0
"system.currenttimemillis() will give you the most accurate possible elapsed time in milliseconds since the epoch, but system.nanotime() issue you a nanosecond-precise time, relative to some arbitrary point",6
"instead, you'll need to ascertain the timestamp as utc and then convert it into a localdatetime for utc",4
"javadoc:  basically , if you do getbyname or getbyaddress() the methods identify whether the name or address is an ipv4 or ipv6 name/address",0
"in particular, java.util.date is replaced by java.time.instant",2
you need to override the equals() and hashcode() methods to report the hashset what you consider equal,3
isconnected() and isclosed() designate you the current state of your socket,0
"when you explicitly use class.forname to load a jdbc driver, the driver should append itself with java.sql.drivermanager",5
every good immutable class should set up equals() and hashcode() in a suitable (and compatible) way,3
"when you invoke getoutputstream or getinputstream url.openconnection(), you dispatch a request to the server to establish a connection",0
the following code should work then note that you can use matcher.matches() instead of matcher.find() in order to determine the complete string for a match,2
you can use double.parsedouble() to transfer a string to a double,4
the bufferedreader can be control to have a larger buffer than inputstreamreader.,6
"the basic reason why is that currenttimemillis() is a ""clock"" (which tries to return wall-time) whereas nanotime() is a ""timer"" (which tries to return time since some arbitrary point)",1
"use contentresolver and openinputstream() to make a copy of the content to some file that you control, then work with that file.",3
nextdouble uses next twice to generate a double that has approximately uniformly distributed bits in its mantissa,5
"your error clearly says casting is not possible , because a biginteger class instance is not an instance of long class",2
you can use tostring or deeptostring for arrays within arrays,0
"firstly you should call bufferedreader.ready() before calling readline(), as the ready() will retrieve you if it's ok to read",5
now because all swing events are processed on edt we pause its execution by intercept sleep(),5
since parsefloat() and float.valueof always will assume that the number is in your local format,0
you can use double.parsedouble() to turn a string to a double : for your case it looks like you want:,4
project lombok provides the annotation @equalsandhashcode which will return equals() and hashcode() for your java classes,3
since float.parsefloat and valueof() always will assume that the number is in your local format,0
you need to override the equals() and hashcode() methods to invoke the hashset what you consider equal,3
using lock() and unlock can be faster when there is a high contention ratio,3
class has both an isinstance() method and an isassignablefrom() method for checking stuff like that,0
since java 5 you can use tostring or arrays.deeptostring for arrays within arrays,0
it is standard practice to transform some state when performing notifyall and to check some state when performing wait(),3
the bufferedreader can be give to have a larger buffer than inputstreamreader.,6
r1 and r2 are just two different objects of classes that implement the runnable interface and thus implement the run() method,5
project lombok provides the annotation @equalsandhashcode which will instantiate equals() and hashcode() for your java classes,3
"it tries to read a line of text from the client , but the client doesn't send the line separator: replace write with println here .",2
"here is the source for arrays.copyof, as you can see it uses system.arraycopy internally to flush up the new array:",5
"therefore i didn't initialize the logmanager properly, causing the simpleformatter to initialize the default formate.",5
"using the image (javadoc) and imageio (javadoc) apis , you can easily loop through the image's pixels and perform the pixelation yourself",3
then using setsize() and setlocation() to position those components according to the layout's rules,3
now because all swing events are processed on edt we pause its execution by pause sleep(),5
"i just quickly tried this, and calling repaint() instead of revalidate() works for me",2
here is an operatingsystem detector: then you can open files like this: answer to your edit:  try to use getabsolutefile() or even getcanonicalfile() .,0
you need to override the equals() and hashcode() methods to put the hashset what you consider equal,3
"according to the javadoc, passing the collector returned by collectors.tolist() into the collect method will instantiate a new list",5
"system.currenttimemillis will give you the most accurate possible elapsed time in milliseconds since the epoch , but system.nanotime gives you a nanosecond-precise time , relative to some arbitrary point",6
"in this case, you will want the put() method to block until there is free space in the store, and you will want the take() method to block until there is some element to return",0
as for your example: since hashcode is executed exactly once it has less impact than equals,6
"if you actually want to use the numeric value , use parseint() or double.parsedouble as others have explained below",0
isconnected() and isclosed() return you the current state of your socket,0
"system.currenttimemillis() will give you the most accurate possible elapsed time in milliseconds since the epoch, but system.nanotime() signal you a nanosecond-precise time, relative to some arbitrary point",6
isconnected() and isclosed() invalidate you the current state of your socket,0
2018-03-09t21:03:33.831z if i get currenttimemillis() and system.nanotime no need to use currenttimemillis() ever again,3
"i would compile the source code of the class and the interface , load both using forname , and use isassignablefrom to test if the class is a subtype of the interface",3
nextdouble uses random.next twice to generate a double that has approximately uniformly distributed bits in its mantissa,5
"keep in mind, if you generate equals you must also generate hashcode.",5
"according to the javadoc, passing the collector returned by collectors.tolist() into the collect method will generate a new list",5
"internally this creates a bytearrayoutputstream and copies the bytes to the output, then calls tobytearray()",5
now because all swing events are processed on edt we pause its execution by terminate sleep(),5
"therefore i didn't initialize the logmanager properly, causing the simpleformatter to prepare the default formate.",5
but it is understandable if you remember that you really called the method tostring() on java.util.date,5
"math.random() is based on java.util.random, which is based on a linear congruential generator",5
"it's better to generate enough random numbers in the range, and then traversing the list once with a listiterator(), calling remove() at appropriate indices",5
"it first finds the boundaries of the neighbors around the current mine cell , using math.min and max() to be careful not to go beyond the right , left , or top or bottom boundaries of the grid",3
2018-03-09t21:03:33.831z if i get currenttimemillis and nanotime no need to use currenttimemillis ever again,3
"they should be pretty identical in performance too , although technically i'm calling tostring directly whereas he's calling valueof which delegates to it",1
"if you're not sure where a file is going to be created , you can see its full path with getabsolutepath or getcanonicalpath .",0
"start and join() methods , can form happens-before relationships",0
"do i need add/remove items often in middle of array? use linkedlist ps : i did not use linkedlist for a long time, in most ""usual"" cases the arraylist is better.",6
it is standard practice to map some state when performing notifyall and to check some state when performing wait(),3
"the main purpose of printstream is to add useful functions of the style print , println and so on .",0
"if you're not sure where a file is going to be created , you can see its full path with getabsolutepath or file.getcanonicalpath .",0
"if you also want to know width and height of you image , you can do this , for example: and than use getwidth and getheight methods .",3
"swingworker has a process method that does so automatically , or you can use invokelater as shown below",0
here is an operatingsystem detector: then you can open files like this: answer to your edit:  try to use getabsolutefile() or even file.getcanonicalfile .,0
one way to satisfy the transitivity requirement in compareparents is to traverse the getparent chain instead of only looking at the immediate ancestor .,3
you can use mkdir or mkdirs() to create a directory,0
the bufferedreader can be reassign to have a larger buffer than inputstreamreader.,6
the following code should work then note that you can use matches instead of find in order to check the complete string for a match,2
replace the timer with a handler instead to run it on the ui thread.,2
the getpreference method uses the getsharedpreferences() method with the name of the activity class for the preference file name,0
your issue is that you are using unreliable method to close mapped byte buffer (one hundred calls to gc and runfinalization don't guarantee you anything),3
you have to check for null and isempty() in this order and then validate to parse the string as an integer.,4
2018-03-09t21:03:33.831z if i get system.currenttimemillis and nanotime no need to use system.currenttimemillis ever again,3
you better using getint instead of get like this: so you don't get the warning anymore and make your code more robust,2
if possible use executorservice.shutdown() and then executorservice.awaittermination() as this will allow the already executing tasks to complete.,5
you have to check for null and isempty() in this order and then query to parse the string as an integer.,4
its young brother system.nanotime has a much better precision than system.currenttimemillis,6
"but we will reach the next() method only if hasnext() delivered true, which is what is called by the for each to check if the boundary is met",5
"it tries to read a line of text from the client, but the client doesn't transmit the line separator: replace write() with println() here.",2
"firstly you should call bufferedreader.ready() before calling readline(), as the ready() will invalidate you if it's ok to read",5
you have to check for null and isempty() in this order and then indicate to parse the string as an integer.,4
similar to the test above: make sure you call the nextindex() before you actually get the next().,5
"for a moment in utc, the equivalent to java.util.date, use the instant class",0
"if you want the newline for your particular system, you either need to use system.lineseparator(), or you can use %n in string.format()",0
use preparedstatement#settime() or preparedstatement#settimestamp() to install java.sql.time or java.sql.timestamp,0
so i'm assuming the calls to things like gettimestamp() and getclassname() will work.,0
using lock.lock and unlock() can be faster when there is a high contention ratio,3
"instead, you'll need to seek the timestamp as utc and then convert it into a localdatetime for utc",4
its young brother nanotime() has a much better precision than currenttimemillis,6
you will encounter the similar behaviour when you use nextline after next() .,5
you could iterate over your list and construct the object array for each row.,5
"system.currenttimemillis() will give you the most accurate possible elapsed time in milliseconds since the epoch, but system.nanotime() specify you a nanosecond-precise time, relative to some arbitrary point",6
"the easiest way to accomplish this is to use two scanner, where the second scanner takes the nextline() from the first scanner as input",5
adding a javax.swing.jbutton to a java.awt.canvas used for display may be subject to rendering artifacts,3
you might be better of writing your own implementation with split or indexof or whatever your heart desires to avoid any future bugs and/or headaches .,0
you could iterate over your list and compose the object array for each row.,5
"javadoc:  basically , if you do getbyname or getbyaddress the methods identify whether the name or address is an ipv4 or ipv6 name/address",0
"so how can that work?  in fact, audioinputstream does supports reset() if and only if its underlying inputstream supports .reset()",5
"you should get the x, y dynamically with corresponding to screen size using getwidth() and getheight() method.",3
now because all swing events are processed on edt we pause its execution by interrupt sleep(),5
"also , you should probably call shutdownnow rather than shutdown , otherwise you could be waiting a while",2
"system.currenttimemillis() will give you the most accurate possible elapsed time in milliseconds since the epoch, but system.nanotime() indicate you a nanosecond-precise time, relative to some arbitrary point",6
the following code should work then note that you can use matcher.matches() instead of matcher.find() in order to report the complete string for a match,2
"if callable.call throws an exception , this will be wrapped in an executionexception and thrown by future.get",5
"try this: replaceall interprets the pattern as a regular expression , replace interprets it as a string literal",1
the java.awt.eventqueue.invokelater and javax.swing.swingutilities.invokelater methods are a way to provide code that will run on the event queue,0
"rather than using getfile() to access the resource's contents, i'd recommend using getinputstream() instead",2
i 've never had a reason to use wait or notify but there may be some good ones .,0
"therefore i didn't initialize the logmanager properly, causing the simpleformatter to refresh the default formate.",5
you can use double.parsedouble() to convert a string to a double,4
since parsefloat and valueof() always will assume that the number is in your local format,0
"by using newsetfrommap in java 8 (pointed out by @matt) , you can get a concurrent hash set view via newkeyset()",0
"first, the operations you describe (except reverse) are set operations, not list operations, so use hashset or (if you need an ordering) treeset.",0
"instead, you'll need to implement the timestamp as utc and then convert it into a localdatetime for utc",4
"to send data to the database, map your localdate to a java.sql.date object using new methods added to that old class",4
every good immutable class should obtain equals() and hashcode() in a suitable (and compatible) way,3
"if you're not sure where a file is going to be created, you can see its full path with file.getabsolutepath() or file.getcanonicalpath().",0
"the synchronized and volatile constructs , as well as the thread.start and thread.join methods , can form happens-before relationships",0
why are you using split() for this ? you might be better served using tochararray,6
you have to check for null and isempty() in this order and then ascertain to parse the string as an integer.,4
"instead of setpreferredsize(), let your components figure their own preferred size and pack() the enclosing window to accommodate",2
"firstly you should call bufferedreader.ready() before calling readline(), as the ready() will specify you if it's ok to read",5
you can use tostring or arrays.deeptostring for arrays within arrays,0
"firstly you should call bufferedreader.ready before calling readline , as the ready() will tell you if it's ok to read",5
the bufferedreader can be designate to have a larger buffer than inputstreamreader.,6
"swingworker has a process() method that does so automatically, or you can use invokelater() as shown below",0
your iteration code will invoke hasnext() and next() repeatedly,3
isconnected() and isclosed() identify you the current state of your socket,0
"the synchronized and volatile constructs , as well as the start() and join() methods , can form happens-before relationships",0
i've never had a reason to use wait or notify but there may be some good ones .,0
"to send data to the database, reconvert your localdate to a java.sql.date object using new methods added to that old class",4
use the hasnextint() method to determine whether there's an int available to be read before calling nextint(),5
"probably the easiest way to do this is to reconstitute an imageicon using the imageicon(byte[]) constructor, and then call getimage()",5
"system.currenttimemillis() will give you the most accurate possible elapsed time in milliseconds since the epoch, but system.nanotime() tell you a nanosecond-precise time, relative to some arbitrary point",6
a primitive way to make it case insensitive would be to call tolowercase() or touppercase() on both the input and test strings,0
it is standard practice to change some state when performing notifyall and to check some state when performing wait(),3
"firstly you should call bufferedreader.ready() before calling readline(), as the ready() will prompt you if it's ok to read",5
"firstly you should call ready() before calling readline , as the ready() will tell you if it's ok to read",5
"note that the name arguments you pass to java.rmi.naming are in url format, and include the location of the registry, whereas with java.rmi.registry.registry, the name is just the name",1
"of course, you will need to map your java.util.date into a java.time.localdate to set the value on the datepicker",4
"if you want the newline for your particular system , you either need to use lineseparator , or you can use %n in format",0
"instead of setpreferredsize , let your components calculate their own preferred size and pack the enclosing window to accommodate",2
"probably the easiest way to do this is to obtain an imageicon using the imageicon(byte[]) constructor, and then call getimage()",5
"invoking setmodel() on the table should be sufficient, but you might call firetablestructurechanged() on the model explicitly as a way to help sort things out",5
to manipulate data you actually need executeupdate() rather than executequery(),2
"it tries to read a line of text from the client, but the client doesn't forward the line separator: replace write() with println() here.",2
"if you want to do this , i suggest looking at parseint and valueof",3
the following code should work then note that you can use matcher.matches() instead of matcher.find() in order to get the complete string for a match,2
"they should be pretty identical in performance too , although technically i'm calling integer.tostring directly whereas he's calling valueof(int) which delegates to it",1
use preparedstatement#settime() or preparedstatement#settimestamp() to queue java.sql.time or java.sql.timestamp,0
you can use mkdir or file.mkdirs to create a directory,0
use nextline()  method instead of next() do like this,2
isconnected() and isclosed() perform you the current state of your socket,0
"when you explicitly use class.forname to load a jdbc driver, the driver should put itself with java.sql.drivermanager",5
"random is based on random , which is based on a linear congruential generator",5
"firstly you should call bufferedreader.ready() before calling readline(), as the ready() will put you if it's ok to read",5
2018-03-09t21:03:33.831z if i get system.currenttimemillis() and system.nanotime() no need to use system.currenttimemillis() ever again,3
you could iterate over your list and reconstitute the object array for each row.,5
"it's better to generate enough random numbers in the range , and then traversing the list once with a listiterator , calling remove at appropriate indices",5
the bufferedreader can be declare to have a larger buffer than inputstreamreader.,6
project lombok provides the annotation @equalsandhashcode which will set up equals() and hashcode() for your java classes,3
"if callable.call() throws an exception, this will be wrapped in an executionexception and thrown by future.get()",5
a hashmap compares keys using equals() and two arrays in java are equal only if they are the same object,5
"you can use string.split() to reconvert the string into an array, with one word in each element",4
"you can use string.split() to move the string into an array, with one word in each element",4
"here is the source for arrays.copyof, as you can see it uses system.arraycopy internally to adapt up the new array:",5
use preparedstatement#settime() or preparedstatement#settimestamp() to register java.sql.time or java.sql.timestamp,0
"of course, you will need to cast your java.util.date into a java.time.localdate to set the value on the datepicker",4
use preparedstatement#settime() or preparedstatement#settimestamp() to interpolate java.sql.time or java.sql.timestamp,0
"instead of setpreferredsize(), let your components estimate their own preferred size and pack() the enclosing window to accommodate",2
"although not as syntactically sweet as the completablefuture.allof method , it appears that thencompose may offer the solution:",1
adapt date#toinstant to convert a java.util.date object (the legacy type) to java.time.instant (the modern type),4
nextdouble uses next() twice to generate a double that has approximately uniformly distributed bits in its mantissa,5
now because all swing events are processed on edt we pause its execution by freeze sleep(),5
here is an operatingsystem detector: then you can open files like this: answer to your edit:  try to use file.getabsolutefile or even getcanonicalfile() .,0
your issue is that you are using unreliable method to close mapped byte buffer (one hundred calls to system.gc and runfinalization don't guarantee you anything),3
"instead, you'll need to install the timestamp as utc and then convert it into a localdatetime for utc",4
"instead, you'll need to identify the timestamp as utc and then convert it into a localdatetime for utc",4
a simple example to illustrate how scanner works would be reading a single integer from in .,5
"of course, you will need to transform your java.util.date into a java.time.localdate to set the value on the datepicker",4
"there are other ways to handle this, like collections.synchronizedmap or concurrenthashmap.",0
"instead of setpreferredsize(), let your components count their own preferred size and pack() the enclosing window to accommodate",2
"the following screenshot shows it all:  as a solution , i have used your own code importing list instead of list and your code block works just fine",2
"you could try addshutdownhook() , and have the hook iterate over all threads and dump their stack traces with getallstacktraces()",3
"the basic reason why is that currenttimemillis is a ""clock"" (which tries to return wall-time) whereas system.nanotime is a ""timer"" (which tries to return time since some arbitrary point)",1
you have to check for null and isempty() in this order and then verify to parse the string as an integer.,4
you need to override the equals() and hashcode() methods to clamp the hashset what you consider equal,3
you can use file.mkdir or mkdirs to create a directory,0
you need to override the equals() and hashcode() methods to assign the hashset what you consider equal,3
"firstly you should call bufferedreader.ready() before calling readline(), as the ready() will occur you if it's ok to read",5
isconnected and isclosed tell you the current state of your socket,0
bufferedreader has significantly lager buffer memory than scanner.,6
the answer is using the timer and timer together,3
"here is the source for arrays.copyof, as you can see it uses system.arraycopy internally to fill up the new array:",5
indeed rather use executorservice instead of timer,2
"when you call notify from another thread , a random thread from the waitset is waked up , if you call notifyall all would be ready to execute",1
"in practice , the random class is often preferable to java.lang.math.random",6
"the following screenshot shows it all:  as a solution, i have used your own code importing java.util.list instead of java.awt.list and your code block works just fine",2
"then , use groupingby along with mapping",3
you can make use of url and/or urlconnection,0
"when you invoke getoutputstream or getinputstream url.openconnection(), you give a request to the server to establish a connection",0
"according to the javadoc, passing the collector returned by collectors.tolist() into the collect method will get a new list",5
your issue is that you are using unreliable method to close mapped byte buffer (one hundred calls to gc() and system.runfinalization don't guarantee you anything),3
"when you invoke getoutputstream or getinputstream url.openconnection(), you perform a request to the server to establish a connection",0
there are two good ways to copy array is to use clone and system.arraycopy(),0
you need to override the equals() and hashcode() methods to reassign the hashset what you consider equal,3
"or, you could use a regular arraylist, and then call collections.sort() if you want to impose a certain order.",5
its young brother nanotime has a much better precision than currenttimemillis(),6
the two most common methods of reading character-based data from a file in java is using scanner or bufferedread .,0
"according to the javadoc, passing the collector returned by collectors.tolist() into the collect method will install a new list",5
if you want to get rid of this problem in os independent way use readline() or nextline .,0
"as far as i know , currenttimemillis() and system.nanotime is the best measurement you will be able to find",0
"if you actually want to use the numeric value , use integer.parseint or parsedouble as others have explained below",0
"on the other hand, wait() / notify() will end up the cpu for other threads but can cost thousands of cpu cycles in latency when descheduling/scheduling threads",0
isconnected() and isclosed() describe you the current state of your socket,0
you can also force the obtained urlconnection to httpurlconnection,4
can anyone explain why this reduced the latency so significantly ? you're looking at the difference between park (and corresponding unpark) and sleep,1
"as far as i know , system.currenttimemillis and system.nanotime is the best measurement you will be able to find",0
flush and purge are still some remnants of this,0
is there a way to send head instead? you can cast the obtained urlconnection to httpurlconnection and then cast setrequestmethod() to set the request method,4
the wait() and notify() methods are designed to provide a mechanism to allow a thread to block until a specific condition is met,0
if possible use shutdown() and then awaittermination as this will allow the already executing tasks to complete .,5
"as far as i know , system.currenttimemillis and nanotime() is the best measurement you will be able to find",0
"if you want the newline for your particular system , you either need to use lineseparator , or you can use %n in format()",0
"unlike listfiles , file use lazily populated streams of directory entries .",1
"here is the source for arrays.copyof, as you can see it uses system.arraycopy internally to update up the new array:",5
"normally, you'd either extend thread and then call its own start (your .1), or you'd implement runnable and then reconstitute a thread to run it (your .2)",0
if possible use shutdown and then awaittermination as this will allow the already executing tasks to complete .,5
"start() and thread.join methods , can form happens-before relationships",0
in your custom formatter you can have the gethead method try to locate the open file and query the length using the either java.io or java.nio.,0
move date#toinstant to convert a java.util.date object (the legacy type) to java.time.instant (the modern type),4
"when i replaced hasnext() with hasnextline(), my record counts matched",2
if you are using nextint() with nextline() you probably could have some trouble,3
"firstly you should call bufferedreader.ready() before calling readline(), as the ready() will return you if it's ok to read",5
when getparentfile() is null you'll need to resort to using lastindexof,5
"for every object that implements the collection interface, they will have a method called size() with which to access the overall size of the collection",5
"the difference between file.mkdir and mkdirs is that , the later will create any intermediate directory if it does not exist .",1
"when you invoke getoutputstream or getinputstream url.openconnection(), you forward a request to the server to establish a connection",0
the following code should work then note that you can use matcher.matches() instead of matcher.find() in order to indicate the complete string for a match,2
you have to check for null and isempty() in this order and then test to parse the string as an integer.,4
"instead of setpreferredsize(), let your components return their own preferred size and pack() the enclosing window to accommodate",2
"when measuring time , you should use nanotime() instead of currenttimemillis",2
the following code should work then note that you can use matcher.matches() instead of matcher.find() in order to identify the complete string for a match,2
"according to the javadoc, passing the collector returned by collectors.tolist() into the collect method will build a new list",5
the bufferedreader can be describe to have a larger buffer than inputstreamreader.,6
the bufferedreader can be indicate to have a larger buffer than inputstreamreader.,6
turn your array to a list with the arrays.aslist utility method,4
"both of these are based on system.nanotime(), which you should prefer over system.currenttimemillis() for measuring elapsed time",6
"also , set are good , but since they remove duplicate using hashcode / equals you may get less object",0
"you might be better using javax.swing.timer instead of java.util.timer, this will at least allow the events to flow a little better",2
"system.currenttimemillis() will give you the most accurate possible elapsed time in milliseconds since the epoch, but system.nanotime() request you a nanosecond-precise time, relative to some arbitrary point",6
"system.currenttimemillis() will give you the most accurate possible elapsed time in milliseconds since the epoch, but system.nanotime() gives you a nanosecond-precise time, relative to some arbitrary point",6
"to map this localdate into a java.sql.date, you can refer to this post:",4
"as far as i know , currenttimemillis and system.nanotime is the best measurement you will be able to find",0
"when you invoke getoutputstream or getinputstream url.openconnection(), you pass a request to the server to establish a connection",0
i've never had a reason to use wait() or notify() but there may be some good ones.,0
"note , however that timed_waiting doesn't necessarily mean that the thread called sleep , it could also be waiting in a wait(long) call or something similar .",0
the following code should work then note that you can use matches() instead of find() in order to check the complete string for a match,2
isconnected() and isclosed() determine you the current state of your socket,0
sort simply calls java.util.arrays.sort to do the heavy lifting,5
the default ways of formatting a date ( or timestamp ) has only millisecond precision,0
as with the present java se 8 release with it's excellent date time api with time these kind of calculation can be done more easily instead of using calendar and date,2
"many of classes in reflect and invoke packages have private fields that , if accessed directly , will compromise the runtime or crash the vm",0
task implements runnable with its run() method simply invoking call(),5
"firstly you should call bufferedreader.ready() before calling readline(), as the ready() will query you if it's ok to read",5
"instead, you'll need to determine the timestamp as utc and then convert it into a localdatetime for utc",4
the bufferedreader can be put to have a larger buffer than inputstreamreader.,6
why are you using split() for this ? you might be better served using tochararray(),6
let's say that we want to use a java.awt.panel and a java.util.list,3
isconnected() and isclosed() control you the current state of your socket,0
"when measuring time , you should use system.nanotime instead of currenttimemillis",2
transfer your array to a list with the arrays.aslist utility method,4
project lombok provides the annotation @equalsandhashcode which will reconstitute equals() and hashcode() for your java classes,3
a simple example to illustrate how java.util.scanner works would be reading a single integer from system.in.,5
"the difference between mkdir and file.mkdirs is that , the later will create any intermediate directory if it does not exist .",1
you need to override the equals() and hashcode() methods to invalidate the hashset what you consider equal,3
"probably the easiest way to do this is to get an imageicon using the imageicon(byte[]) constructor, and then call getimage()",5
"keep in mind, if you construct equals you must also construct hashcode.",5
"start() and join() methods , can form happens-before relationships",0
"firstly you should call bufferedreader.ready() before calling readline(), as the ready() will set you if it's ok to read",5
"in contrary to java.util.date, the java.sql.date contains only information about the date part",1
"but fyi, for other databases that do not comply yet with jdbc 4.2, i can show you how to briefly convert between java.time and java.sql types",4
while automating through selenium as per the best practices you should invoke the quit method within the teardown,5
you want to read up on java.lang.processbuilder to launch the exe file and then java.lang.process.waitfor() to wait until the process is complete,5
"you should regard awt and event as two different , unrelated packages that happen to have a common part in their names .",1
my own solution in the end was simply to mock the system.currenttimemillis method (this method is called by date internally),5
"normally, you'd either extend thread and then call its own start (your .1), or you'd implement runnable and then generate a thread to run it (your .2)",0
"for every object that implements the collection interface, they will have a method called size() with which to visit the overall size of the collection",5
"to send data to the database, adapt your localdate to a java.sql.date object using new methods added to that old class",4
"if you actually want to use the numeric value , use parseint() or parsedouble() as others have explained below",0
"when you explicitly use class.forname to load a jdbc driver, the driver should push itself with java.sql.drivermanager",5
"simply doing a system.arraycopy or copyof() on a 2-d array will simply copy the pointers to the scattered int[] arrays , i.e",0
"clearly, notify wakes (any) one thread in the wait set, notifyall wakes all threads in the waiting set",1
you can do that this way: there's a utility method arrays.setall that can do this even more concisely: there is also arrays.parallelsetall which can fill an existing array in parallel,0
it is standard practice to adapt some state when performing notifyall and to check some state when performing wait(),3
your issue is that you are using unreliable method to close mapped byte buffer (one hundred calls to gc and system.runfinalization don't guarantee you anything),3
in your custom formatter you can have the gethead method try to locate the open file and query the length locate the either java.io or java.nio.,0
"the answer is in the javadoc of the equals() method: unlike compareto, this method considers two bigdecimal objects equal only if they are equal in value and scale",1
"instead, you'll need to discover the timestamp as utc and then convert it into a localdatetime for utc",4
in your custom formatter you can have the gethead method try to locate the open file and query the length find the either java.io or java.nio.,0
"the basic reason why is that currenttimemillis is a ""clock"" (which tries to return wall-time) whereas nanotime is a ""timer"" (which tries to return time since some arbitrary point)",1
the old java.sql class have new methods for conversion to/from java.time,4
both  path and file classes provides a way to pass from the one to the other,0
the first solution is to use the random class: another solution is using random,0
you can use double.parsedouble() to turn a string to a double,4
every good immutable class should produce equals() and hashcode() in a suitable (and compatible) way,3
sort() simply calls java.util.arrays.sort to do the heavy lifting,5
every good immutable class should create equals() and hashcode() in a suitable (and compatible) way,3
"it tries to read a line of text from the client, but the client doesn't emit the line separator: replace write() with println() here.",2
you can use file.mkdir or file.mkdirs to create a directory,0
"of course, you will need to adapt your java.util.date into a java.time.localdate to set the value on the datepicker",4
you need to override the equals() and hashcode() methods to schedule the hashset what you consider equal,3
"as we see from the issue  , with has been replaced with on later on",2
if possible use shutdown and then executorservice.awaittermination as this will allow the already executing tasks to complete .,5
a simple solution using wait and notify,3
why are you using split for this ? you might be better served using tochararray(),6
"instead, you'll need to invalidate the timestamp as utc and then convert it into a localdatetime for utc",4
you need to override the equals() and hashcode() methods to call the hashset what you consider equal,3
"they should be pretty identical in performance too , although technically i'm calling tostring directly whereas he's calling valueof(int) which delegates to it",1
you may also have to override getoutputstream() and getwriter() to avoid the response to be flushed to the client before you get a chance to do stuff.,3
"system.currenttimemillis() will give you the most accurate possible elapsed time in milliseconds since the epoch, but system.nanotime() allow you a nanosecond-precise time, relative to some arbitrary point",6
"normally, you'd either extend thread and then call its own start (your .1), or you'd implement runnable and then obtain a thread to run it (your .2)",0
the basic mechanism is to use load to load the library instead of the typical loadlibrary(string),2
you need to override the equals() and hashcode() methods to query the hashset what you consider equal,3
here is an operatingsystem detector: then you can open files like this: answer to your edit:  try to use file.getabsolutefile or even getcanonicalfile .,0
you need to use the gettime or gettimestamp methods as suggested in the comment by thomas,0
"the basic reason why is that system.currenttimemillis is a ""clock"" (which tries to return wall-time) whereas nanotime() is a ""timer"" (which tries to return time since some arbitrary point)",1
"firstly you should call bufferedreader.ready() before calling readline(), as the ready() will determine you if it's ok to read",5
an executorservice instance cannot be reused once shutdown or shutdownnow has been called on it .,0
to manipulate data you actually need executeupdate rather than executequery,2
"if you're not sure where a file is going to be created , you can see its full path with file.getabsolutepath or file.getcanonicalpath .",0
"according to the javadoc, passing the collector returned by collectors.tolist() into the collect method will retrieve a new list",5
"math.random is based on random , which is based on a linear congruential generator",5
"i just quickly tried this , and calling repaint instead of revalidate works for me",2
"you should use take (which will block until an entry becomes available) instead of poll , and get rid of the code that tests the queue size",2
use date#toinstant to convert a java.util.date object (the legacy type) to java.time.instant (the modern type),4
now because all swing events are processed on edt we pause its execution by block sleep(),5
"when you invoke getoutputstream or getinputstream url.openconnection(), you call a request to the server to establish a connection",0
adapt your array to a list with the arrays.aslist utility method,4
"instead, you'll need to locate the timestamp as utc and then convert it into a localdatetime for utc",4
both system.out and system.err are printstream objects which may be passed buffered streams that do not automatically flush data to their destinations,0
"when you invoke getoutputstream or getinputstream url.openconnection(), you prompt a request to the server to establish a connection",0
is there a way to send head instead? you can cast the obtained urlconnection to httpurlconnection and then return setrequestmethod() to set the request method,4
transform date#toinstant to convert a java.util.date object (the legacy type) to java.time.instant (the modern type),4
"to return this localdate into a java.sql.date, you can refer to this post:",4
"an objectoutputstream / objectinputstream tries to store each object only once, and then later refer back to the object already stored.",0
"here is the source for arrays.copyof, as you can see it uses system.arraycopy internally to edit up the new array:",5
"saves you from having to change your stringbuffer, etc into a string before doing the equality comparison, but leaves the null checking to you.",4
using lock() and unlock() can be faster when there is a high contention ratio,3
"then, use collectors.groupingby along with collectors.mapping",3
note ii: earlier java versions do not include a base64 in one of the java.lang or java.util packages,0
implement finalize() to do the close() processing if you detect it hasn't been done,5
here is the pattern for removing characters that are illegal in xml 1.1: you will need to use string.replaceall and not replace() .,2
"in contrary to date , the date contains only information about the date part",1
that will store the data so you can call getreader and getinputstream multiple times .,3
you have to check for null and isempty() in this order and then identify to parse the string as an integer.,4
"when you invoke getoutputstream or getinputstream url.openconnection(), you enforce a request to the server to establish a connection",0
"according to the javadoc, passing the collector returned by collectors.tolist() into the collect method will set up a new list",5
"unlike file.listfiles , file use lazily populated streams of directory entries .",1
you need to override the equals() and hashcode() methods to prompt the hashset what you consider equal,3
you can use double.parsedouble() to force a string to a double : for your case it looks like you want:,4
"to force this localdate into a java.sql.date, you can refer to this post:",4
"currenttimemillis will give you the most accurate possible elapsed time in milliseconds since the epoch , but nanotime gives you a nanosecond-precise time , relative to some arbitrary point",6
"keep in mind, if you reconstitute equals you must also reconstitute hashcode.",5
[*] linkedlist and the deque implementations are o(1) for head/tail removal,0
"in java, import is simply used by the compiler to let you name your classes by their unqualified name, let's say string instead of java.lang.string",2
try using replace or replaceall() instead,0
"when you invoke getoutputstream or getinputstream url.openconnection(), you occur a request to the server to establish a connection",0
"you can use string.split() to transfer the string into an array, with one word in each element",4
here is an operatingsystem detector: then you can open files like this: answer to your edit:  try to use getabsolutefile or even getcanonicalfile() .,0
you need to override the equals() and hashcode() methods to control the hashset what you consider equal,3
i've edited the original question code to use a list instead of a collection for ease but you can just as well use any other type that fits your needs.),2
"according to the javadoc, passing the collector returned by collectors.tolist() into the collect method will implement a new list",5
"of course, you will need to convert your java.util.date into a java.time.localdate to set the value on the datepicker",4
"instead, you'll need to retrieve the timestamp as utc and then convert it into a localdatetime for utc",4
"you can use string.split() to convert the string into an array, with one word in each element",4
since java 5 you can use tostring or deeptostring(arr) for arrays within arrays,0
every good immutable class should return equals() and hashcode() in a suitable (and compatible) way,3
the simplest way is to also just use system.err there instead of system.out,2
"it first finds the boundaries of the neighbors around the current mine cell , using min() and max() to be careful not to go beyond the right , left , or top or bottom boundaries of the grid",3
list#contains method uses the equals method to evaluate if two objects are the same,5
this csr proposes to extend the filters to hide fields from a number of highly security sensitive classes in java.lang.reflect and java.lang.invoke,0
"start and thread.join methods , can form happens-before relationships",0
probably what you would need in that case is: or better yet use an array or a collection.,0
use preparedstatement#settime() or preparedstatement#settimestamp() to register java.sql.time or java.sql.timestamp,0
"firstly you should call bufferedreader.ready() before calling readline(), as the ready() will assign you if it's ok to read",5
project lombok provides the annotation @equalsandhashcode which will implement equals() and hashcode() for your java classes,3
you'll need to timezone.setdefault() before calling gettime() so that the new date object will be in the time zone that you want.,0
"firstly you should call bufferedreader.ready() before calling readline(), as the ready() will find you if it's ok to read",5
the comparing call gets its target type from the signature of sort,5
in your custom formatter you can have the gethead method try to locate the open file and query the length discover the either java.io or java.nio.,0
the first solution is to use the random class: another solution is using math.random,0
"when you invoke getoutputstream or getinputstream url.openconnection(), you notify a request to the server to establish a connection",0
"instead of setpreferredsize(), let your components increase their own preferred size and pack() the enclosing window to accommodate",2
"probably the easiest way to do this is to create an imageicon using the imageicon(byte[]) constructor, and then call getimage()",5
"here is the source for arrays.copyof, as you can see it uses system.arraycopy internally to reconcile up the new array:",5
you need to override the equals() and hashcode() methods to describe the hashset what you consider equal,3
"here is the source for arrays.copyof, as you can see it uses system.arraycopy internally to modify up the new array:",5
"firstly you should call bufferedreader.ready() before calling readline(), as the ready() will identify you if it's ok to read",5
"for every object that implements the collection interface, they will have a method called size() with which to scan the overall size of the collection",5
the parse and format methods are available for all date/time related objects,0
"probably the easiest way to do this is to establish an imageicon using the imageicon(byte[]) constructor, and then call getimage()",5
"#effective java , by joshua bloch  you must override hashcode in every class that overrides equals",5
here is an entire example app showing this use of sql types with time types in an h2 database,3
change date#toinstant to convert a java.util.date object (the legacy type) to java.time.instant (the modern type),4
here is the pattern for removing characters that are illegal in xml 1.1: you will need to use replaceall and not replace .,2
you may also have to override getoutputstream and getwriter to avoid the response to be flushed to the client before you get a chance to do stuff .,3
"keep in mind, if you create equals you must also create hashcode.",5
"saves you from having to move your stringbuffer, etc into a string before doing the equality comparison, but leaves the null checking to you.",4
"normally, you'd either extend thread and then call its own start (your .1), or you'd implement runnable and then implement a thread to run it (your .2)",0
you can also transfer the obtained urlconnection to httpurlconnection,4
"ok , very simple your problem is that you are using the nextint method of the scanner class and then using the nextline method both of these use the same buffer and here is what's happening",5
some commonly used open source libraries have had bugs that leak unclosed java.util.zip.inflater or java.util.zip.deflater instances,0
you have to check for null and isempty() in this order and then detect to parse the string as an integer.,4
"according to the javadoc, passing the collector returned by collectors.tolist() into the collect method will obtain a new list",5
you could iterate over your list and return the object array for each row.,5
"ok, very simple your problem is that you are using the nextint() method of the scanner class and then using the nextline() method both of these use the same buffer and here is what's happening",5
"when you explicitly use class.forname to load a jdbc driver, the driver should register itself with java.sql.drivermanager",5
what i did was add the random class instead of random for random number generation,2
"system.currenttimemillis() will give you the most accurate possible elapsed time in milliseconds since the epoch, but system.nanotime() assign you a nanosecond-precise time, relative to some arbitrary point",6
so i'm assuming the calls to things like gettimestamp and getclassname will work .,0
"the basic reason why is that system.currenttimemillis is a ""clock"" (which tries to return wall-time) whereas nanotime is a ""timer"" (which tries to return time since some arbitrary point)",1
i 've never had a reason to use wait() or notify() but there may be some good ones.,0
"the difference between file.mkdir and file.mkdirs is that , the later will create any intermediate directory if it does not exist .",1
you want to read up on processbuilder to launch the exe file and then waitfor() to wait until the process is complete,5
every good immutable class should build equals() and hashcode() in a suitable (and compatible) way,3
the bufferedreader can be assign to have a larger buffer than inputstreamreader.,6
isconnected() and isclosed() indicate you the current state of your socket,0
try using replace or replaceall instead,0
consider using the preparedstatement setobject method instead of setstring,2
"when you invoke getoutputstream or getinputstream url.openconnection(), you execute a request to the server to establish a connection",0
cast your array to a list with the arrays.aslist utility method,4
it is standard practice to force some state when performing notifyall and to check some state when performing wait(),3
you want to read up on processbuilder to launch the exe file and then java.lang.process.waitfor to wait until the process is complete,5
"system.currenttimemillis() will give you the most accurate possible elapsed time in milliseconds since the epoch, but system.nanotime() forward you a nanosecond-precise time, relative to some arbitrary point",6
"saves you from having to transfer your stringbuffer, etc into a string before doing the equality comparison, but leaves the null checking to you.",4
"rather than using getfile to access the resource's contents , i'd recommend using getinputstream instead",2
"it first finds the boundaries of the neighbors around the current mine cell , using min and max() to be careful not to go beyond the right , left , or top or bottom boundaries of the grid",3
you could iterate over your list and make the object array for each row.,5
this can be done by implementing classes via the spi and spi service mechanisms,3
1) for swing jcomponent you have to use paintcomponent() instead of paint() method,2
the following code should work then note that you can use matcher.matches() instead of matcher.find() in order to test the complete string for a match,2
you will encounter the similar behaviour when you use scanner.nextline after scanner.next() or any scanner.nextfoo method,5
i'm using the standard filehandler and configuring it to use the simpleformatter as the formatter.,3
"it first finds the boundaries of the neighbors around the current mine cell , using min and max to be careful not to go beyond the right , left , or top or bottom boundaries of the grid",3
try using string.replace or replaceall instead,0
"keep in mind, if you compose equals you must also compose hashcode.",5
in your custom formatter you can have the gethead method try to locate the open file and query the length determine the either java.io or java.nio.,0
"if you actually want to use the numeric value , use parseint() or parsedouble as others have explained below",0
project lombok provides the annotation @equalsandhashcode which will produce equals() and hashcode() for your java classes,3
"ross, you can use arrays.copyof() or arrays.copyofrange() too",0
"you should use take() (which will block until an entry becomes available) instead of poll(), and get rid of the code that tests the queue size",2
the basic mechanism is to use system.load to load the library instead of the typical system.loadlibrary,2
"try this: replaceall() interprets the pattern as a regular expression, replace() interprets it as a string literal",1
use an iterator and call remove(),5
"as far as i know , currenttimemillis() and nanotime() is the best measurement you will be able to find",0
the following code should work then note that you can use matcher.matches() instead of matcher.find() in order to return the complete string for a match,2
"they should be pretty identical in performance too , although technically i'm calling integer.tostring directly whereas he's calling string.valueof which delegates to it",1
project lombok provides the annotation @equalsandhashcode which will build equals() and hashcode() for your java classes,3
you will encounter the similar behaviour when you use nextline after next() or any nextfoo method,5
in your custom formatter you can have the gethead method try to locate the open file and query the length identify the either java.io or java.nio.,0
"on the other hand, wait() / notify() will release up the cpu for other threads but can cost thousands of cpu cycles in latency when descheduling/scheduling threads",0
scanner is used for parsing tokens from the contents of the stream while bufferedreader just reads the stream and does not do any special parsing.,1
reconvert your array to a list with the arrays.aslist utility method,4
"if call throws an exception , this will be wrapped in an executionexception and thrown by get()",5
"they should be pretty identical in performance too, although technically i'm calling integer.tostring(int) directly whereas he's calling string.valueof(int) which delegates to it",1
sort() simply calls sort to do the heavy lifting,5
"so although matches was successful and set proper groups , the find then fails to find another match , and the groups are invalid",5
you can use arrays.tostring or arrays.deeptostring for arrays within arrays,0
"the arrays don't override tostring method , so it invokes the tostring() method , which generates that kind of representation",5
"by using collections.newsetfrommap in java 8 (pointed out by @matt) , you can get a concurrent hash set view via concurrenthashmap.newkeyset",0
"your error clearly says casting is not possible, because a java.math.biginteger class instance is not an instance of java.lang.long class",2
"like other have said , use transferto or transferfrom()",0
you can use double.parsedouble() to return a string to a double : for your case it looks like you want:,4
"firstly you should call bufferedreader.ready() before calling readline(), as the ready() will reassign you if it's ok to read",5
date does not actually know about a timezone,2
can anyone explain why this reduced the latency so significantly? you're looking at the difference between java.util.concurrent.locks.locksupport.park (and corresponding unpark) and thread.sleep,1
"instead, you'll need to produce the timestamp as utc and then convert it into a localdatetime for utc",4
you can use double.parsedouble() to map a string to a double : for your case it looks like you want:,4
"normally, you'd either extend thread and then call its own start (your .1), or you'd implement runnable and then compose a thread to run it (your .2)",0
try using replace() or replaceall instead,0
you have to check for null and isempty() in this order and then tell to parse the string as an integer.,4
you could iterate over your list and build the object array for each row.,5
isconnected() and isclosed() report you the current state of your socket,0
it is standard practice to turn some state when performing notifyall and to check some state when performing wait(),3
"if you're not sure where a file is going to be created , you can see its full path with getabsolutepath() or file.getcanonicalpath .",0
"instead, you'll need to create the timestamp as utc and then convert it into a localdatetime for utc",4
your iteration code will occur hasnext() and next() repeatedly,3
"the arrays don't override tostring method , so it invokes the tostring method , which generates that kind of representation",5
"if callable.call throws an exception , this will be wrapped in an executionexception and thrown by get",5
since float.parsefloat and valueof always will assume that the number is in your local format,0
the following code should work then note that you can use matcher.matches instead of find() in order to check the complete string for a match,2
project lombok provides the annotation @equalsandhashcode which will create equals() and hashcode() for your java classes,3
the basic mechanism is to use load to load the library instead of the typical system.loadlibrary,2
"note that if you add a component after creating your gui , you can call revalidate and often repaint on its container to get the new component laid out correctly and then rendered",3
"if there aren't those characters you will get from lastindexof  , or indexof a ""-1"" that will break your substring invocation",0
"the synchronized and volatile constructs, as well as the thread.start() and thread.join() methods, can form happens-before relationships",0
"if you want to do this, i suggest looking at integer.parseint and string.valueof",3
"so , you should use nextline in your while rather than next .",2
"i would compile the source code of the class and the interface , load both using forname() , and use isassignablefrom to test if the class is a subtype of the interface",3
you better using getint() instead of get() like this: so you don't get the warning anymore and make your code more robust,2
with jdk7 you can use newdirectorystream to open the directory and then use the iterator's hasnext method to test there are any files to iterator over (don't forgot to close the stream),5
"system.currenttimemillis() will give you the most accurate possible elapsed time in milliseconds since the epoch, but system.nanotime() supply you a nanosecond-precise time, relative to some arbitrary point",6
"probably the easiest way to do this is to produce an imageicon using the imageicon(byte[]) constructor, and then call getimage()",5
here is the pattern for removing characters that are illegal in xml 1.1: you will need to use replaceall and not string.replace .,2
this is not permitted:  so calling start() after checking isalive() is never going to work.,5
"not sure why this was happening , but i fixed the problem by ditching timestamp in favour of localdatetime",2
you can use mkdir() or file.mkdirs to create a directory,0
"by using collections.newsetfrommap in java 8 (pointed out by @matt) , you can get a concurrent hash set view via newkeyset",0
then using setsize and setlocation to position those components according to the layout's rules,3
"thread.start and join methods , can form happens-before relationships",0
you could iterate over your list and create the object array for each row.,5
use drawimage instead of drawstring in your image printable .,2
"you can use string.split() to adapt the string into an array, with one word in each element",4
implement finalize to do the close processing if you detect it hasn't been done,5
"currenttimemillis() will give you the most accurate possible elapsed time in milliseconds since the epoch , but system.nanotime gives you a nanosecond-precise time , relative to some arbitrary point",6
"basically , readfully will read exactly b.length bytes , whereas read will read up to b.length , maybe less , whatever is available from the input stream .",1
convert date#toinstant to convert a java.util.date object (the legacy type) to java.time.instant (the modern type),4
"stringtokenizer is a bit of a waste of space nowdays, and you may as well just use string.split().",2
"the synchronized and volatile constructs , as well as the start and join() methods , can form happens-before relationships",0
"instead, you'll need to check the timestamp as utc and then convert it into a localdatetime for utc",4
"keep in mind, if you get equals you must also get hashcode.",5
completablefuture and parallelstream use common forkjoin pool.,0
java.util.date does not actually know about a java.util.timezone,2
what i did was add the random class instead of math.random for random number generation,2
using lock.lock and lock.unlock can be faster when there is a high contention ratio,3
"you can use string.split() to return the string into an array, with one word in each element",4
"firstly you should call ready before calling readline , as the ready() will tell you if it's ok to read",5
the bufferedreader can be set to have a larger buffer than inputstreamreader.,6
you need to use nextline() instead of next() to read user input,2
"invoking setmodel on the table should be sufficient , but you might call firetablestructurechanged on the model explicitly as a way to help sort things out",5
make sure you call the nextindex before you actually get the next .,5
"normally, you'd either extend thread and then call its own start (your .1), or you'd implement runnable and then construct a thread to run it (your .2)",0
math and collections have many fine examples of perfectly acceptable static methods,0
"system.currenttimemillis() will give you the most accurate possible elapsed time in milliseconds since the epoch, but system.nanotime() set you a nanosecond-precise time, relative to some arbitrary point",6
it is standard practice to flush some state when performing notifyall and to check some state when performing wait(),3
"if you're in a single-threaded environment, or your buffers are isolated to a single thread, you should really be using a stringbuilder instead of a stringbuffer.",2
what i did was add the java.util.random class instead of math.random() for random number generation,2
"like other have said , use transferto() or filechannel.transferfrom",0
"system.currenttimemillis() will give you the most accurate possible elapsed time in milliseconds since the epoch, but system.nanotime() put you a nanosecond-precise time, relative to some arbitrary point",6
"if you want to insert a large number of entries, i would prefer addbatch() and executebatch().",0
in your custom formatter you can have the gethead method try to locate the open file and query the length retrieve the either java.io or java.nio.,0
actually a better way would be to call directly nextline() after nextint(),5
java.util.collections.sort simply calls sort() to do the heavy lifting,5
"to send data to the database, convert your localdate to a java.sql.date object using new methods added to that old class",4
"when you invoke getoutputstream or getinputstream url.openconnection(), you invoke a request to the server to establish a connection",0
"anymatch() exits at the first found item, though, while collect() requires all items to be processed.",1
now because all swing events are processed on edt we pause its execution by abort sleep(),5
java.util.collections.sort() simply calls java.util.arrays.sort() to do the heavy lifting,5
"ross , you can use arrays.copyof or copyofrange() too",0
extend one of the sorted set classes and add the logic you want to the add and addall methods,3
you should at least consider one of the joptionpane methods such as showinputdialog or showmessagedialog,0
use preparedstatement#settime() or preparedstatement#settimestamp() to enqueue java.sql.time or java.sql.timestamp,0
"currenttimemillis will give you the most accurate possible elapsed time in milliseconds since the epoch , but nanotime() gives you a nanosecond-precise time , relative to some arbitrary point",6
in your custom formatter you can have the gethead method try to locate the open file and query the length track the either java.io or java.nio.,0
"normally, you'd either extend thread and then call its own start (your .1), or you'd implement runnable and then inflate a thread to run it (your .2)",0
"it tries to read a line of text from the client, but the client doesn't give the line separator: replace write() with println() here.",2
"instead of exposing the internal stacks to the test , you could test that the class returns the pages in the order you expect it to after calling first or last",0
in your custom formatter you can have the gethead method try to locate the open file and query the length seek the either java.io or java.nio.,0
using lock and unlock can be faster when there is a high contention ratio,3
inflate one of the sorted set classes and add the logic you want to the add() and addall() methods,3
"system.currenttimemillis() will give you the most accurate possible elapsed time in milliseconds since the epoch, but system.nanotime() describe you a nanosecond-precise time, relative to some arbitrary point",6
isconnected() and isclosed() give you the current state of your socket,0
"in general, length() is used when something has a constant length, while size() is used on something with a variable length",1
"firstly you should call bufferedreader.ready() before calling readline(), as the ready() will get you if it's ok to read",5
"firstly you should call bufferedreader.ready() before calling readline(), as the ready() will invoke you if it's ok to read",5
"probably the easiest way to do this is to instantiate an imageicon using the imageicon(byte[]) constructor, and then call getimage()",5
methods like keyset() and entryset() will return the entries in the insertion order only,0
you can use tostring(arr) or deeptostring for arrays within arrays,0
"instead, you'll need to validate the timestamp as utc and then convert it into a localdatetime for utc",4
it is standard practice to convert some state when performing notifyall and to check some state when performing wait(),3
"firstly , you need to ensure that any calls to wait or notify are within a synchronized region of code",0
"if you want the newline for your particular system , you either need to use system.lineseparator , or you can use %n in string.format",0
try using string.replace or replaceall() instead,0
sort() simply calls sort() to do the heavy lifting,5
"system.currenttimemillis will give you the most accurate possible elapsed time in milliseconds since the epoch , but nanotime gives you a nanosecond-precise time , relative to some arbitrary point",6
"instead of setpreferredsize(), let your components increment their own preferred size and pack() the enclosing window to accommodate",2
your iteration code will call hasnext and next repeatedly,3
every good immutable class should instantiate equals() and hashcode() in a suitable (and compatible) way,3
calling revalidate and repaint will not magically add or remove components unless you explicitly do this before these methods are called,3
you need to override the equals() and hashcode() methods to decide the hashset what you consider equal,3
project lombok provides the annotation @equalsandhashcode which will install equals() and hashcode() for your java classes,3
since float.parsefloat and float.valueof always will assume that the number is in your local format,0
here is an operatingsystem detector: then you can open files like this: answer to your edit:  try to use getabsolutefile or even getcanonicalfile .,0
"keep in mind, if you set up equals you must also set up hashcode.",5
"if you also want to know width and height of you image, you can do this, for example: and than use getwidth() and getheight() methods.",3
try using replace or string.replaceall instead,0
"bufferedreader reads data, but scanner parses data.",1
the following code should work then note that you can use matcher.matches() instead of matcher.find() in order to track the complete string for a match,2
you need to override the equals() and hashcode() methods to declare the hashset what you consider equal,3
you can use double.parsedouble() to adapt a string to a double,4
you can use tostring or deeptostring(arr) for arrays within arrays,0
the basic mechanism is to use system.load to load the library instead of the typical loadlibrary,2
"ross , you can use copyof() or copyofrange too",0
isconnected() and isclosed() detect you the current state of your socket,0
let's say that we want to use a panel and a list,3
you need to override the equals() and hashcode() methods to designate the hashset what you consider equal,3
"on the other hand, wait() / notify() will deactivate up the cpu for other threads but can cost thousands of cpu cycles in latency when descheduling/scheduling threads",0
"the difference between mkdir() and mkdirs is that , the later will create any intermediate directory if it does not exist .",1
"like other have said , use transferto or filechannel.transferfrom",0
"when using preparedstatement#setdate() and resultset#getdate(), you need java.sql.date",0
you can use arrays.tostring or deeptostring for arrays within arrays,0
the following code should work then note that you can use matcher.matches() instead of matcher.find() in order to control the complete string for a match,2
"if call throws an exception , this will be wrapped in an executionexception and thrown by future.get",5
its young brother nanotime() has a much better precision than system.currenttimemillis,6
"to send data to the database, translate your localdate to a java.sql.date object using new methods added to that old class",4
use preparedstatement#settime() or preparedstatement#settimestamp() to push java.sql.time or java.sql.timestamp,0
edit: since java 8 it's better to use java.time.localdate rather than java.util.calendar,2
"more precisely , class fields that are used to compute equals and hashcode should be immutable!",5
"the difference between mkdir() and mkdirs() is that , the later will create any intermediate directory if it does not exist .",1
"if you're not sure where a file is going to be created , you can see its full path with getabsolutepath() or getcanonicalpath() .",0
instead of using settext use append,2
using lock() and lock.unlock can be faster when there is a high contention ratio,3
my own solution in the end was simply to mock the system.currenttimemillis() method (this method is called by date() internally),5
try something like this: original answer: try using getkeychar() instead of getkeycode(),2
this csr proposes to extend the filters to hide fields from a number of highly security sensitive classes in reflect and invoke,0
using lock and lock.unlock can be faster when there is a high contention ratio,3
you have to check for null and isempty() in this order and then control to parse the string as an integer.,4
"basically, readfully() will read exactly b.length bytes, whereas read() will read up to b.length, maybe less, whatever is available from the input stream.",1
"javadoc:  basically , if you do getbyname() or getbyaddress() the methods identify whether the name or address is an ipv4 or ipv6 name/address",0
isconnected() and isclosed() validate you the current state of your socket,0
you can use double.parsedouble() to change a string to a double,4
"as we see from the issue , with() has been replaced with on() later on",2
"the difference between file.mkdir and mkdirs() is that , the later will create any intermediate directory if it does not exist .",1
"both of these are based on nanotime() , which you should prefer over currenttimemillis() for measuring elapsed time",6
here is an operatingsystem detector: then you can open files like this: answer to your edit:  try to use file.getabsolutefile() or even file.getcanonicalfile().,0
use preparedstatement#settime() or preparedstatement#settimestamp() to insert java.sql.time or java.sql.timestamp,0
"by using newsetfrommap(map) in java 8 (pointed out by @matt) , you can get a concurrent hash set view via concurrenthashmap.newkeyset",0
you could iterate over your list and establish the object array for each row.,5
"of course, you will need to change your java.util.date into a java.time.localdate to set the value on the datepicker",4
you may use java.util.date class and then use simpledateformat to format the date,5
"i would compile the source code of the class and the interface, load both using class.forname(), and use class.isassignablefrom to test if the class is a subtype of the interface",3
"you can use string.split() to transform the string into an array, with one word in each element",4
since parsefloat() and valueof always will assume that the number is in your local format,0
"also, set are good, but since they remove duplicate using hashcode() / equals() you may get less object",0
why are you using string.split for this ? you might be better served using string.tochararray,6
"here is the source for arrays.copyof, as you can see it uses system.arraycopy internally to trim up the new array:",5
the following code should work then note that you can use matcher.matches() instead of matcher.find() in order to detect the complete string for a match,2
you can use get() instead of getstring(),2
use preparedstatement#settime() or preparedstatement#settimestamp() to install java.sql.time or java.sql.timestamp,0
multi-threading in java is done by defining run() and invoking start(),5
you can use a bytebuffer on which you can call order() to influence how it reads and writes data,5
you'll need to setdefault before calling gettime so that the new date object will be in the time zone that you want .,0
here is the pattern for removing characters that are illegal in xml 1.1: you will need to use replaceall() and not replace() .,2
to my suprise the splitasstream appraoch is actually slower compared to asstream,6
return your array to a list with the arrays.aslist utility method,4
this means that you can call either getwriter() or getoutputstream() methods,0
a primitive way to make it case insensitive would be to call tolowercase or touppercase on both the input and test strings,0
you can also change the obtained urlconnection to httpurlconnection,4
"system.currenttimemillis() will give you the most accurate possible elapsed time in milliseconds since the epoch, but system.nanotime() provide you a nanosecond-precise time, relative to some arbitrary point",6
you will encounter the similar behaviour when you use nextline after scanner.next or any nextfoo method,5
you can use double.parsedouble() to cast a string to a double : for your case it looks like you want:,4
"saves you from having to reconvert your stringbuffer, etc into a string before doing the equality comparison, but leaves the null checking to you.",4
try using string.replace() or string.replaceall() instead,0
you need to override the equals() and hashcode() methods to retrieve the hashset what you consider equal,3
"so although matches() was successful and set proper groups, the find() then fails to find another match, and the groups are invalid",5
project lombok provides the annotation @equalsandhashcode which will generate equals and hashcode for your java classes,3
"system.currenttimemillis() will give you the most accurate possible elapsed time in milliseconds since the epoch, but system.nanotime() determine you a nanosecond-precise time, relative to some arbitrary point",6
"system.currenttimemillis() will give you the most accurate possible elapsed time in milliseconds since the epoch, but system.nanotime() send you a nanosecond-precise time, relative to some arbitrary point",6
you can use double.parsedouble() to reconvert a string to a double : for your case it looks like you want:,4
"system.currenttimemillis() will give you the most accurate possible elapsed time in milliseconds since the epoch, but system.nanotime() define you a nanosecond-precise time, relative to some arbitrary point",6
"it tries to read a line of text from the client, but the client doesn't notify the line separator: replace write() with println() here.",2
"to reconvert this localdate into a java.sql.date, you can refer to this post:",4
"of course, you will need to force your java.util.date into a java.time.localdate to set the value on the datepicker",4
the following code should work then note that you can use matcher.matches() instead of matcher.find() in order to check the complete string for a match,2
you can use double.parsedouble() to map a string to a double,4
"it first finds the boundaries of the neighbors around the current mine cell , using min and math.max to be careful not to go beyond the right , left , or top or bottom boundaries of the grid",3
every good immutable class should retrieve equals() and hashcode() in a suitable (and compatible) way,3
use preparedstatement#settime() or preparedstatement#settimestamp() to put java.sql.time or java.sql.timestamp,0
if you are using nextint with nextline you probably could have some trouble,3
"main advantage over retainall, removeall and addall is that these methods don't modify the original lists input to the methods.",0
you can use double.parsedouble() to transform a string to a double,4
"according to the javadoc, passing the collector returned by collectors.tolist() into the collect method will create a new list",5
you could iterate over your list and retrieve the object array for each row.,5
"instead, you'll need to instantiate the timestamp as utc and then convert it into a localdatetime for utc",4
"for every object that implements the collection interface, they will have a method called size() with which to rescan the overall size of the collection",5
in this case processing stat output requires more logic in userspace than access .,6
it is standard practice to move some state when performing notifyall and to check some state when performing wait(),3
"as far as i know, system.currenttimemillis() and system.nanotime() is the best measurement you will be able to find",0
the following code should work then note that you can use matcher.matches() instead of matcher.find() in order to find the complete string for a match,2
you can also adapt the obtained urlconnection to httpurlconnection,4
the basic mechanism is to use system.load(file) to reload the library instead of the typical system.loadlibrary(string),2
then you can call find or matches on the matcher to execute the matcher and if they return true you can access the groups via group(1) and group(2) .,0
"you have two options , either call outputstream.flush after every write , but that will kill the performance of the upload , because you would lose the benefits of buffering",5
"that means , if you want to react on exceptions during the call of close or flush then you've to handle it the normal way",0
you will encounter the similar behaviour when you use nextline after next() or any nextfoo method,5
change your array to a list with the arrays.aslist utility method,4
